
Fusebox_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080011e  0080011e  0000044c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ee  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c74  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000712  00000000  00000000  000022fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00002a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000744  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000198  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000349c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	a4 c1       	rjmp	.+840    	; 0x36e <__vector_9>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	65 c1       	rjmp	.+714    	; 0x30c <__vector_16>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	44 c0       	rjmp	.+136    	; 0xee <__vector_25>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ea e9       	ldi	r30, 0x9A	; 154
  a8:	f3 e0       	ldi	r31, 0x03	; 3
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ae 31       	cpi	r26, 0x1E	; 30
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	ae e1       	ldi	r26, 0x1E	; 30
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a6 33       	cpi	r26, 0x36	; 54
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	c0 d0       	rcall	.+384    	; 0x24c <main>
  cc:	64 c1       	rjmp	.+712    	; 0x396 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_config>:
uint8_t adc_next = 0;



void adc_config(){
	ADMUX = (1<<REFS0); // AREF = AVcc and PF0 (ADC0) as input defined
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0) | (1<<ADIE);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8c e8       	ldi	r24, 0x8C	; 140
  dc:	80 83       	st	Z, r24
	// ADEN enables ADC
	// ADIE enables ADC interrupt
	// ADPS (Prescaler) 16
	// see datasheet page 290
	ADCSRA |= (1<<ADSC); //start first conversion
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <adc_start_conversion>:
}

void adc_start_conversion(){
	//start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADSC);
  e6:	88 ec       	ldi	r24, 0xC8	; 200
  e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ec:	08 95       	ret

000000ee <__vector_25>:
}

ISR(ADC_vect){
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	0b b6       	in	r0, 0x3b	; 59
  fa:	0f 92       	push	r0
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	//cli();
	// store ADC result
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); //low bit erst ablesen
 114:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 118:	e8 2f       	mov	r30, r24
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 120:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	ee 5c       	subi	r30, 0xCE	; 206
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	31 83       	std	Z+1, r19	; 0x01
 12e:	20 83       	st	Z, r18
	adc_next++;
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	//adc_values[0] = (ADC*5)/1023;  //cant decide where in the code this should go without testing
	//adc_values[1] = ((ADC*5)/1023)+((10000*(ADC*5)/1023)/2500); //no way this is efficient, needs to be optimized later
	// reset index var
	//sei();
	if(adc_next == ADCVALUES){
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	11 f4       	brne	.+4      	; 0x13e <__vector_25+0x50>
		adc_next = 0;
 13a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 13e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 142:	80 64       	ori	r24, 0x40	; 64
 144:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	adc_start_conversion();
 148:	ce df       	rcall	.-100    	; 0xe6 <adc_start_conversion>
	
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0b be       	out	0x3b, r0	; 59
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <fuse_read_out>:


uint16_t fuse_read_out(){
	//shifting bits so  that an input in the register is always gonna be read as 1 (1 means a Fuse is in, 0 means a fuse is out), otherwise a Fuse 0b00000010 is a decimal 2
																												// with the  shit operation 0b00000010>>1 is a decimal 1 (0b00000001)
	FRO_Aim_EVO			=	(PINA & 0b00000001); //no need to shift 
 170:	80 b1       	in	r24, 0x00	; 0
 172:	81 70       	andi	r24, 0x01	; 1
 174:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <FRO_Aim_EVO>
	FRO_Shutdown		=	(PINA & 0b00000010)>>1;  //FRO_Shutdown at PA1, 1st bit of that register, therefore we shift the 1st bit to the 0th bit
 178:	80 b1       	in	r24, 0x00	; 0
 17a:	82 70       	andi	r24, 0x02	; 2
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
 182:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <FRO_Shutdown>
	FRO_Brakelight		=	(PINA & 0b00000100)>>2;  //alternative way of writing this is PINA & (1<<PB2), meaning it reads out the state of the register at the bit of PIN 2 (2nd bit) (the bit still is not shifted in this form => (PINA & (1<<PB2))>>2 ?)
 186:	80 b1       	in	r24, 0x00	; 0
 188:	84 70       	andi	r24, 0x04	; 4
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	95 95       	asr	r25
 192:	87 95       	ror	r24
 194:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <FRO_Brakelight>
	FRO_24V				=	(PINA & 0b00001000)>>3;
 198:	80 b1       	in	r24, 0x00	; 0
 19a:	88 70       	andi	r24, 0x08	; 8
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	95 95       	asr	r25
 1a0:	87 95       	ror	r24
 1a2:	95 95       	asr	r25
 1a4:	87 95       	ror	r24
 1a6:	95 95       	asr	r25
 1a8:	87 95       	ror	r24
 1aa:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <FRO_24V>
	
	FRO_HV_Distri		=	(PINE & 0b00000001);
 1ae:	8c b1       	in	r24, 0x0c	; 12
 1b0:	81 70       	andi	r24, 0x01	; 1
 1b2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <FRO_HV_Distri>
	FRO_TSAL			=	(PINE & 0b00000010)>>1;
 1b6:	8c b1       	in	r24, 0x0c	; 12
 1b8:	82 70       	andi	r24, 0x02	; 2
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	95 95       	asr	r25
 1be:	87 95       	ror	r24
 1c0:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <FRO_TSAL>
	FRO_TSAC			=	(PINE & 0b00000100)>>2;
 1c4:	8c b1       	in	r24, 0x0c	; 12
 1c6:	84 70       	andi	r24, 0x04	; 4
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
 1d2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <FRO_TSAC>
	FRO_INV0			=	(PINE & 0b00001000)>>3;
 1d6:	8c b1       	in	r24, 0x0c	; 12
 1d8:	88 70       	andi	r24, 0x08	; 8
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	95 95       	asr	r25
 1de:	87 95       	ror	r24
 1e0:	95 95       	asr	r25
 1e2:	87 95       	ror	r24
 1e4:	95 95       	asr	r25
 1e6:	87 95       	ror	r24
 1e8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <FRO_INV0>
	FRO_INV1			=	(PINE & 0b00010000)>>4;
 1ec:	8c b1       	in	r24, 0x0c	; 12
 1ee:	80 71       	andi	r24, 0x10	; 16
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	95 95       	asr	r25
 1f4:	87 95       	ror	r24
 1f6:	95 95       	asr	r25
 1f8:	87 95       	ror	r24
 1fa:	95 95       	asr	r25
 1fc:	87 95       	ror	r24
 1fe:	95 95       	asr	r25
 200:	87 95       	ror	r24
 202:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <FRO_INV1>
	FRO_FAN_PU_Sup		=	(PINE & 0b00100000)>>5;
 206:	8c b1       	in	r24, 0x0c	; 12
 208:	80 72       	andi	r24, 0x20	; 32
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	95 95       	asr	r25
 20e:	87 95       	ror	r24
 210:	95 95       	asr	r25
 212:	87 95       	ror	r24
 214:	95 95       	asr	r25
 216:	87 95       	ror	r24
 218:	95 95       	asr	r25
 21a:	87 95       	ror	r24
 21c:	95 95       	asr	r25
 21e:	87 95       	ror	r24
 220:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <FRO_FAN_PU_Sup>
	FRO_FAN_ACC_Sup		=	(PINE & 0b01000000)>>6;
 224:	8c b1       	in	r24, 0x0c	; 12
 226:	80 74       	andi	r24, 0x40	; 64
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	08 2e       	mov	r0, r24
 22c:	89 2f       	mov	r24, r25
 22e:	00 0c       	add	r0, r0
 230:	88 1f       	adc	r24, r24
 232:	99 0b       	sbc	r25, r25
 234:	00 0c       	add	r0, r0
 236:	88 1f       	adc	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <FRO_FAN_ACC_Sup>
	FRO_WP_Sup			=	(PINE & 0b10000000)>>7;
 23e:	8c b1       	in	r24, 0x0c	; 12
 240:	88 1f       	adc	r24, r24
 242:	88 27       	eor	r24, r24
 244:	88 1f       	adc	r24, r24
 246:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <FRO_WP_Sup>
 /* set bits of this integer to correspond with our 11 fuses*/
 Fuse_States |= (FRO_Aim_EVO<<0) | (FRO_Shutdown<<1) | (FRO_Brakelight<<2/*>>0b0000000000000010*/) | (FRO_24V>>3) | (FRO_HV_Distri>>4) | (FRO_TSAL>>5) | (FRO_TSAC>>6) | (FRO_INV0>>7) | (FRO_INV1>>8) | (FRO_FAN_PU_Sup>>9) | (FRO_FAN_ACC_Sup>>10) | (FRO_WP_Sup>>11);
/* all fuses being a logical 1 (fuse is IN) give us the following value : 0b0000011111111111 = 11d , because we shifted fuse bits in the read function, we can just 
assign those 1s to any bit within our 16 bit integer, just like we do with registers*/

 24a:	08 95       	ret

0000024c <main>:


int main(void){
	
	
	fuse_read_out();
 24c:	91 df       	rcall	.-222    	; 0x170 <fuse_read_out>
	port_config(); //   => this function messes up the Interrupts and makes it impossible do perform the ADC conversion , correction, the DDRF is the issue here
 24e:	42 d0       	rcall	.+132    	; 0x2d4 <port_config>
	sys_timer_config();
 250:	4a d0       	rcall	.+148    	; 0x2e6 <sys_timer_config>
	adc_config();
 252:	3e df       	rcall	.-388    	; 0xd0 <adc_config>
 254:	80 d0       	rcall	.+256    	; 0x356 <timer2_config>
	timer2_config();
 256:	78 94       	sei
 258:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>

	while (1)
	{
		
		
		if (sys_time >= heart_beat){ 
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	a0 e0       	ldi	r26, 0x00	; 0
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <sys_time>
 266:	50 91 2c 01 	lds	r21, 0x012C	; 0x80012c <sys_time+0x1>
 26a:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <sys_time+0x2>
 26e:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <sys_time+0x3>
 272:	48 17       	cp	r20, r24
 274:	59 07       	cpc	r21, r25
 276:	6a 07       	cpc	r22, r26
 278:	7b 07       	cpc	r23, r27
 27a:	70 f3       	brcs	.-36     	; 0x258 <main+0xc>
 27c:	42 d0       	rcall	.+132    	; 0x302 <sys_tick_heart>
			sys_tick_heart();
 27e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <sys_time>
			//PORTB ^= (1<<PB4);
			sys_time = 0;	
 282:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <sys_time+0x1>
 286:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <sys_time+0x2>
 28a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <sys_time+0x3>
 28e:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <note_next>
			OCR2A = song[note_next];
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	ef 5f       	subi	r30, 0xFF	; 255
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	80 81       	ld	r24, Z
 29a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 29e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <note_length>
	
	note_length++;
 2a2:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <note_length+0x1>
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <note_length+0x1>
 2ac:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <note_length>
 2b0:	c3 97       	sbiw	r24, 0x33	; 51
 2b2:	49 f4       	brne	.+18     	; 0x2c6 <main+0x7a>

	if (note_length == 51)
 2b4:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <note_length+0x1>
	{
		note_length = 0;
 2b8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <note_length>
 2bc:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <note_next>
		note_next++;	
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <note_next>
 2c6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <note_next>
	}
		if (note_next == 29)
 2ca:	8d 31       	cpi	r24, 0x1D	; 29
 2cc:	29 f6       	brne	.-118    	; 0x258 <main+0xc>
 2ce:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <note_next>
	{
		note_next = 0;
 2d2:	c2 cf       	rjmp	.-124    	; 0x258 <main+0xc>

000002d4 <port_config>:
#include <avr/interrupt.h>

volatile unsigned long sys_time = 0;

void port_config(){
	DDRA = 0;   //Fuse Read Out Inputs
 2d4:	11 b8       	out	0x01, r1	; 1
	DDRB = 0 | (1<<PB0) | (1<<PB1) |(1<<PB2) | (1<<PB3) | (1<<PB4); //WP, fan and LED outputs
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0; // Shutdown circuit just like FRO is an input (indicates the state of those pins for debugging purposes)
 2da:	17 b8       	out	0x07, r1	; 7
	DDRD = 0 | (1<<PD2) | (1<<PD3) | (1<<PD5) | (1<<PD6); // timer for the buzzer and can outputs
 2dc:	8c e6       	ldi	r24, 0x6C	; 108
 2de:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0; //Fuse Read Out Inputs
 2e0:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0; /*| (1<<PF4) | (1<<PF5) | (1<<PF6) | (1<<PF7);*/ // should i set these as output?
 2e2:	10 ba       	out	0x10, r1	; 16
 2e4:	08 95       	ret

000002e6 <sys_timer_config>:
}

void sys_timer_config(){   //all previous software uses a 1ms timer/counter =>CTC with OCR0A=250
	TCCR0A |= (1<<WGM01);
 2e6:	84 b5       	in	r24, 0x24	; 36
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<CS01) | (1<<CS00);
 2ec:	84 b5       	in	r24, 0x24	; 36
 2ee:	83 60       	ori	r24, 0x03	; 3
 2f0:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1<<OCF0A);  //interrupt flags possible
 2f2:	ee e6       	ldi	r30, 0x6E	; 110
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	80 83       	st	Z, r24
	OCR0A = 250; // what timer do we need, btw the compiler doesnt like anything bigger than 300 for some reason (reason is the 2^8 bits = 256)
 2fc:	8a ef       	ldi	r24, 0xFA	; 250
 2fe:	87 bd       	out	0x27, r24	; 39
 300:	08 95       	ret

00000302 <sys_tick_heart>:
}

void sys_tick_heart(){
	PORTB ^= (1<<PB4); //toggle the Heart led on Pin 4, will be controlled by the super loop in main.c
 302:	95 b1       	in	r25, 0x05	; 5
 304:	80 e1       	ldi	r24, 0x10	; 16
 306:	89 27       	eor	r24, r25
 308:	85 b9       	out	0x05, r24	; 5
 30a:	08 95       	ret

0000030c <__vector_16>:
	
};

ISR(TIMER0_COMP_vect){
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
	sys_time++;  //system time incremented on each interrupt flag from the CTC compare register => every OCR0A
 31e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <sys_time>
 322:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <sys_time+0x1>
 326:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <sys_time+0x2>
 32a:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <sys_time+0x3>
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	a1 1d       	adc	r26, r1
 332:	b1 1d       	adc	r27, r1
 334:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <sys_time>
 338:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <sys_time+0x1>
 33c:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <sys_time+0x2>
 340:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <sys_time+0x3>
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <timer2_config>:
	OCR2A =42 ;		//	  16000000/(2*64*42) = 2976 Hz
	//sei();
		
}

void funny_function(){
 356:	e0 eb       	ldi	r30, 0xB0	; 176
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	8c 60       	ori	r24, 0x0C	; 12
 35e:	80 83       	st	Z, r24
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 366:	8a e2       	ldi	r24, 0x2A	; 42
 368:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 36c:	08 95       	ret

0000036e <__vector_9>:
	
}

ISR(TIMER2_COMP_vect){ //isr fur timer2 
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
	cli();
 37c:	f8 94       	cli
	PORTD ^= (1<<PD2);
 37e:	9b b1       	in	r25, 0x0b	; 11
 380:	84 e0       	ldi	r24, 0x04	; 4
 382:	89 27       	eor	r24, r25
 384:	8b b9       	out	0x0b, r24	; 11
	sei();
 386:	78 94       	sei
		if (note_next == 4)
	{
		note_next = 0;
	}
	*/
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
