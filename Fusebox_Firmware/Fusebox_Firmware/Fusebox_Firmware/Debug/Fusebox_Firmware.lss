
Fusebox_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800100  00800100  00000276  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c18  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adb  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000309  00000000  00000000  00001a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  00002374  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__vector_25>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	af 30       	cpi	r26, 0x0F	; 15
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	52 d0       	rcall	.+164    	; 0x156 <main>
  b2:	a5 c0       	rjmp	.+330    	; 0x1fe <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <adc_config>:
uint8_t adc_next = 0;



void adc_config(){
	ADMUX = (1<<REFS0); // AREF = AVcc and PF0 (ADC0) as input defined
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0) | (1<<ADIE);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	8c e8       	ldi	r24, 0x8C	; 140
  c2:	80 83       	st	Z, r24
	// ADEN enables ADC
	// ADIE enables ADC interrupt
	// see datasheet page 290
	ADCSRA |= (1<<ADSC); //start first conversion
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <adc_start_conversion>:
}

void adc_start_conversion(){
	//start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADSC);
  cc:	88 ec       	ldi	r24, 0xC8	; 200
  ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  d2:	08 95       	ret

000000d4 <__vector_25>:
}

ISR(ADC_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	0b b6       	in	r0, 0x3b	; 59
  e0:	0f 92       	push	r0
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	
	// store ADC result
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); low bit erst ablesen
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 106:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ed 5f       	subi	r30, 0xFD	; 253
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	31 83       	std	Z+1, r19	; 0x01
 114:	20 83       	st	Z, r18
	adc_next++;
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	// reset index var
	if(adc_next == ADCVALUES){
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	11 f4       	brne	.+4      	; 0x124 <__vector_25+0x50>
		adc_next = 0;
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	adc_start_conversion();
 12e:	ce df       	rcall	.-100    	; 0xcc <adc_start_conversion>
	
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0b be       	out	0x3b, r0	; 59
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <main>:

unsigned long long waste_cpu_time;
unsigned int loops_completed = 0;
int main(void)
{	
	sei(); //interrupts on
 156:	78 94       	sei
	adc_config();
 158:	ae df       	rcall	.-164    	; 0xb6 <adc_config>
		//ADCSRA |= (1<<ADIF);
		
		// this var is 8bytes
		// we reset it to zero after it filled
		// 4byte
		waste_cpu_time++;
 15a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <waste_cpu_time>
 15e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <waste_cpu_time+0x1>
 162:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <waste_cpu_time+0x2>
 166:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <waste_cpu_time+0x3>
 16a:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <waste_cpu_time+0x4>
 16e:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <waste_cpu_time+0x5>
 172:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <waste_cpu_time+0x6>
 176:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <waste_cpu_time+0x7>
 17a:	a1 e0       	ldi	r26, 0x01	; 1
 17c:	34 d0       	rcall	.+104    	; 0x1e6 <__adddi3_s8>
 17e:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <waste_cpu_time>
 182:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <waste_cpu_time+0x1>
 186:	40 93 09 01 	sts	0x0109, r20	; 0x800109 <waste_cpu_time+0x2>
 18a:	50 93 0a 01 	sts	0x010A, r21	; 0x80010a <waste_cpu_time+0x3>
 18e:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <waste_cpu_time+0x4>
 192:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <waste_cpu_time+0x5>
 196:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <waste_cpu_time+0x6>
 19a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <waste_cpu_time+0x7>
		if (waste_cpu_time > 0xffffffff){ //0xffffffff
 19e:	2f 3f       	cpi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	4f 4f       	sbci	r20, 0xFF	; 255
 1a4:	5f 4f       	sbci	r21, 0xFF	; 255
 1a6:	61 05       	cpc	r22, r1
 1a8:	71 05       	cpc	r23, r1
 1aa:	81 05       	cpc	r24, r1
 1ac:	91 05       	cpc	r25, r1
 1ae:	a9 f2       	breq	.-86     	; 0x15a <main+0x4>
 1b0:	a0 f2       	brcs	.-88     	; 0x15a <main+0x4>
			waste_cpu_time = 0;
 1b2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <waste_cpu_time>
 1b6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <waste_cpu_time+0x1>
 1ba:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <waste_cpu_time+0x2>
 1be:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <waste_cpu_time+0x3>
 1c2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <waste_cpu_time+0x4>
 1c6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <waste_cpu_time+0x5>
 1ca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <waste_cpu_time+0x6>
 1ce:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <waste_cpu_time+0x7>
			loops_completed ++;
 1d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <loops_completed>
 1d6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <loops_completed+0x1>
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <loops_completed+0x1>
 1e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <loops_completed>
 1e4:	ba cf       	rjmp	.-140    	; 0x15a <main+0x4>

000001e6 <__adddi3_s8>:
 1e6:	00 24       	eor	r0, r0
 1e8:	a7 fd       	sbrc	r26, 7
 1ea:	00 94       	com	r0
 1ec:	2a 0f       	add	r18, r26
 1ee:	30 1d       	adc	r19, r0
 1f0:	40 1d       	adc	r20, r0
 1f2:	50 1d       	adc	r21, r0
 1f4:	60 1d       	adc	r22, r0
 1f6:	70 1d       	adc	r23, r0
 1f8:	80 1d       	adc	r24, r0
 1fa:	90 1d       	adc	r25, r0
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
