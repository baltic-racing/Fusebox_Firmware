
Fusebox_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000576  0000060a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000576  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080011e  0080011e  00000628  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000136a  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e51  00000000  00000000  00001b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a59  00000000  00000000  0000297b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000033d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a7  00000000  00000000  0000363c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c3  00000000  00000000  00003de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000042a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	6b c2       	rjmp	.+1238   	; 0x4fc <__vector_9>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c1       	rjmp	.+682    	; 0x2dc <__vector_12>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	2c c2       	rjmp	.+1112   	; 0x49a <__vector_16>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__vector_25>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 e7       	ldi	r30, 0x76	; 118
  a8:	f5 e0       	ldi	r31, 0x05	; 5
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ae 31       	cpi	r26, 0x1E	; 30
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	ae e1       	ldi	r26, 0x1E	; 30
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a2 33       	cpi	r26, 0x32	; 50
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	1d d1       	rcall	.+570    	; 0x306 <main>
  cc:	52 c2       	rjmp	.+1188   	; 0x572 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_start_conversion>:
	ADCSRA |= (1<<ADSC); //start first conversion
}

void adc_start_conversion(){
	//start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADSC);
  d0:	88 ec       	ldi	r24, 0xC8	; 200
  d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  d6:	08 95       	ret

000000d8 <__vector_25>:
}

ISR(ADC_vect){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	0b b6       	in	r0, 0x3b	; 59
  e4:	0f 92       	push	r0
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	//cli();
	// store ADC result
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); //low bit erst ablesen
  fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 102:	e8 2f       	mov	r30, r24
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 10a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e2 5d       	subi	r30, 0xD2	; 210
 114:	fe 4f       	sbci	r31, 0xFE	; 254
 116:	31 83       	std	Z+1, r19	; 0x01
 118:	20 83       	st	Z, r18
	adc_next++;
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	//adc_values[0] = (ADC*5)/1023;  //cant decide where in the code this should go without testing
	//adc_values[1] = ((ADC*5)/1023)+((10000*(ADC*5)/1023)/2500); //no way this is efficient, needs to be optimized later
	// reset index var
	//sei();
	if(adc_next == ADCVALUES){
 120:	82 30       	cpi	r24, 0x02	; 2
 122:	11 f4       	brne	.+4      	; 0x128 <__vector_25+0x50>
		adc_next = 0;
 124:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 128:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	adc_start_conversion();
 132:	ce df       	rcall	.-100    	; 0xd0 <adc_start_conversion>
	
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0b be       	out	0x3b, r0	; 59
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <can_check_free>:

uint8_t can_check_free(uint8_t mobnum){
	
	uint8_t mob_status = 0;
	
	if(mobnum >7){
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	78 f0       	brcs	.+30     	; 0x17c <can_check_free+0x22>
		
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
 15e:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 97       	sbiw	r24, 0x08	; 8
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <can_check_free+0x14>
 16a:	35 95       	asr	r19
 16c:	27 95       	ror	r18
 16e:	8a 95       	dec	r24
 170:	e2 f7       	brpl	.-8      	; 0x16a <can_check_free+0x10>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	20 ff       	sbrs	r18, 0
 176:	0d c0       	rjmp	.+26     	; 0x192 <can_check_free+0x38>
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret


		} else {
		
		mob_status = !((CANEN2 >> mobnum) &1);
 17c:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <can_check_free+0x2e>
 184:	35 95       	asr	r19
 186:	27 95       	ror	r18
 188:	8a 95       	dec	r24
 18a:	e2 f7       	brpl	.-8      	; 0x184 <can_check_free+0x2a>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	20 fd       	sbrc	r18, 0
 190:	80 e0       	ldi	r24, 0x00	; 0
	}

	return mob_status;
	
}
 192:	08 95       	ret

00000194 <can_cfg>:
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
 194:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	29 c0       	rjmp	.+82     	; 0x1ee <can_cfg+0x5a>
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	48 9f       	mul	r20, r24
 1a0:	90 01       	movw	r18, r0
 1a2:	11 24       	eor	r1, r1
 1a4:	82 2f       	mov	r24, r18
 1a6:	88 60       	ori	r24, 0x08	; 8
 1a8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANSTMOB = 0;
 1ac:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0;
 1b0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANIDT4 = 0;
 1b4:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDT3 = 0;
 1b8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT2 = 0;
 1bc:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = 0;
 1c0:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDM4 = 0;
 1c4:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANIDM3 = 0;
 1c8:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM2 = 0;
 1cc:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM1 = 0;
 1d0:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		for (uint8_t byte = 0; byte < 8; byte++){
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <can_cfg+0x54>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
 1d8:	98 2f       	mov	r25, r24
 1da:	92 2b       	or	r25, r18
 1dc:	98 60       	ori	r25, 0x08	; 8
 1de:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			CANMSG = 0;
 1e2:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	88 30       	cpi	r24, 0x08	; 8
 1ea:	b0 f3       	brcs	.-20     	; 0x1d8 <can_cfg+0x44>
}
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
 1ec:	4f 5f       	subi	r20, 0xFF	; 255
 1ee:	4f 30       	cpi	r20, 0x0F	; 15
 1f0:	a8 f2       	brcs	.-86     	; 0x19c <can_cfg+0x8>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x00;// Set Baudrate
 1f2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;// 500kBaud according
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
 1f8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x36;// to Datasheet S. 267
 1fc:	86 e3       	ldi	r24, 0x36	; 54
 1fe:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANGIE = 0;
 202:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	CANGCON |= (1<<ENASTB); // Enable CAN
 206:	e8 ed       	ldi	r30, 0xD8	; 216
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	80 83       	st	Z, r24
 210:	08 95       	ret

00000212 <can_rx>:
	
	
	
}
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
 21c:	8b 01       	movw	r16, r22
	
	CANPAGE = to_receive->mob_number << MOBNB0;
 21e:	8c 81       	ldd	r24, Y+4	; 0x04
 220:	82 95       	swap	r24
 222:	80 7f       	andi	r24, 0xF0	; 240
 224:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_receive->mob_number)){
 228:	8c 81       	ldd	r24, Y+4	; 0x04
 22a:	97 df       	rcall	.-210    	; 0x15a <can_check_free>
 22c:	88 23       	and	r24, r24
 22e:	71 f1       	breq	.+92     	; 0x28c <can_rx+0x7a>
		/* load the id 11 bit */
		CANIDT1 = to_receive->mob_id >>3;
 230:	88 81       	ld	r24, Y
 232:	99 81       	ldd	r25, Y+1	; 0x01
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	96 95       	lsr	r25
 23e:	87 95       	ror	r24
 240:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_receive->mob_id << 5)&0b11100000;
 244:	88 81       	ld	r24, Y
 246:	82 95       	swap	r24
 248:	88 0f       	add	r24, r24
 24a:	80 7e       	andi	r24, 0xE0	; 224
 24c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 250:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 1<<RTRTAG;
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = to_receive->mob_idmask >>3;
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	9b 81       	ldd	r25, Y+3	; 0x03
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = (to_receive->mob_idmask <<5)&0b11100000;
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	82 95       	swap	r24
 272:	88 0f       	add	r24, r24
 274:	80 7e       	andi	r24, 0xE0	; 224
 276:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 27a:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 27e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
 282:	88 ec       	ldi	r24, 0xC8	; 200
 284:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 288:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANGCON |= (1<<ENASTB); // Enable CAN
	
	
	
}
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	10 c0       	rjmp	.+32     	; 0x2b0 <can_rx+0x9e>
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
 290:	8c 81       	ldd	r24, Y+4	; 0x04
 292:	30 e1       	ldi	r19, 0x10	; 16
 294:	83 9f       	mul	r24, r19
 296:	c0 01       	movw	r24, r0
 298:	11 24       	eor	r1, r1
 29a:	82 2b       	or	r24, r18
 29c:	88 60       	ori	r24, 0x08	; 8
 29e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		data[byte] = CANMSG;
 2a2:	f8 01       	movw	r30, r16
 2a4:	e2 0f       	add	r30, r18
 2a6:	f1 1d       	adc	r31, r1
 2a8:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 2ac:	80 83       	st	Z, r24
		CANIDM4 = 0;
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
 2ae:	2f 5f       	subi	r18, 0xFF	; 255
 2b0:	28 30       	cpi	r18, 0x08	; 8
 2b2:	70 f3       	brcs	.-36     	; 0x290 <can_rx+0x7e>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	08 95       	ret

000002be <fan_power_unit_PWM_control>:
TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11);// | (1<<CS10);  //mode 14, need to set prescaler to 1, otherwise timer goes inactive and nothing happens
		
TIMSK1 = (1<<OCIE1A);		//interrupts on?
//ICR1 = 250;   //       16000000/(8*(1+64)) = 30769.23077 Hz   //with TOP value 62+1 the resolution is 6 bit
OCR1A = 63; 
OCR1B = 24;	//50% duty?, changing this does nothing to the blinky so far
 2be:	85 36       	cpi	r24, 0x65	; 101
 2c0:	08 f0       	brcs	.+2      	; 0x2c4 <fan_power_unit_PWM_control+0x6>
 2c2:	84 e6       	ldi	r24, 0x64	; 100
 2c4:	85 30       	cpi	r24, 0x05	; 5
 2c6:	48 f0       	brcs	.+18     	; 0x2da <fan_power_unit_PWM_control+0x1c>
 2c8:	2f e3       	ldi	r18, 0x3F	; 63
 2ca:	82 9f       	mul	r24, r18
 2cc:	c0 01       	movw	r24, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	64 e6       	ldi	r22, 0x64	; 100
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	27 d1       	rcall	.+590    	; 0x524 <__divmodhi4>
 2d6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 2da:	08 95       	ret

000002dc <__vector_12>:
// WGM1[1:0]	= 11;
// COM1[1:0]	= 11;
// CS1[2:0]`	= 010;
}

ISR(TIMER1_COMPA_vect){
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
//PORTB ^= (1<<PB3);
OCR1B = fan_duty;
 2ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2f4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>


 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <main>:

uint8_t R2D_pressed = 0;



int main(void){
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	2d 97       	sbiw	r28, 0x0d	; 13
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61

//	fuse_read_out();
	
	
	
	can_cfg();
 31a:	3c df       	rcall	.-392    	; 0x194 <can_cfg>
//	adc_config();
	
	timer2_config();
 31c:	e3 d0       	rcall	.+454    	; 0x4e4 <timer2_config>
	sys_timer_config();
 31e:	aa d0       	rcall	.+340    	; 0x474 <sys_timer_config>
 320:	97 d0       	rcall	.+302    	; 0x450 <port_config>
	port_config(); 
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	91 e0       	ldi	r25, 0x01	; 1
	//can_FB_mob.mob_number = 0;
	//uint8_t FB_databytes[8];  

	
	struct CAN_MOB can_R2D_mob;
	can_R2D_mob.mob_id = 0b100000000;
 326:	9a 83       	std	Y+2, r25	; 0x02
 328:	89 83       	std	Y+1, r24	; 0x01
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	97 e0       	ldi	r25, 0x07	; 7
	can_R2D_mob.mob_idmask = 0b11111111111;
 32e:	9c 83       	std	Y+4, r25	; 0x04
 330:	8b 83       	std	Y+3, r24	; 0x03
 332:	1d 82       	std	Y+5, r1	; 0x05
 334:	78 94       	sei
	can_R2D_mob.mob_number = 0;
 336:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <sys_time>
	while (1)
	{
		
		

	if((sys_time - time_old) > 10){  //10ms
 33a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <sys_time+0x1>
 33e:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <sys_time+0x2>
 342:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <sys_time+0x3>
 346:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <time_old>
 34a:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <time_old+0x1>
 34e:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <time_old+0x2>
 352:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <time_old+0x3>
 356:	8c 01       	movw	r16, r24
 358:	9d 01       	movw	r18, r26
 35a:	04 1b       	sub	r16, r20
 35c:	15 0b       	sbc	r17, r21
 35e:	26 0b       	sbc	r18, r22
 360:	37 0b       	sbc	r19, r23
 362:	0b 30       	cpi	r16, 0x0B	; 11
 364:	11 05       	cpc	r17, r1
 366:	21 05       	cpc	r18, r1
 368:	31 05       	cpc	r19, r1
 36a:	08 f4       	brcc	.+2      	; 0x36e <main+0x68>
 36c:	4d c0       	rjmp	.+154    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 36e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <time_old>
				time_old = sys_time; //
 372:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <time_old+0x1>
 376:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <time_old+0x2>
 37a:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <time_old+0x3>
 37e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <time_old_100ms>
				time_old_100ms++;// use for a longer loop later
 382:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <time_old_100ms+0x1>
 386:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <time_old_100ms+0x2>
 38a:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <time_old_100ms+0x3>
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	a1 1d       	adc	r26, r1
 392:	b1 1d       	adc	r27, r1
 394:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <time_old_100ms>
 398:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <time_old_100ms+0x1>
 39c:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <time_old_100ms+0x2>
 3a0:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <time_old_100ms+0x3>
 3a4:	95 b1       	in	r25, 0x05	; 5
 3a6:	88 e0       	ldi	r24, 0x08	; 8
				PORTB ^= (1<<PB3);
 3a8:	89 27       	eor	r24, r25
 3aa:	85 b9       	out	0x05, r24	; 5
 3ac:	be 01       	movw	r22, r28
 3ae:	6a 5f       	subi	r22, 0xFA	; 250
	//FB_databytes[7]	= 0							;
		//
	//
	//can_tx(&can_FB_mob, FB_databytes);  //& is a reference operator 
	
	can_rx(&can_R2D_mob, R2D_databytes);
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	ce 01       	movw	r24, r28
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	2d df       	rcall	.-422    	; 0x212 <can_rx>
 3b8:	88 85       	ldd	r24, Y+8	; 0x08
 3ba:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <R2D_pressed>

//	can_rx(&mob_to_transmit, mob_0_data);
	
	R2D_pressed = R2D_databytes[2];// | R2D_databytes[3];
 3be:	80 ff       	sbrs	r24, 0
 3c0:	21 c0       	rjmp	.+66     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
//	R2D_pressed = mob_0_data[2];								
		if (R2D_pressed & 1){
 3c2:	95 b1       	in	r25, 0x05	; 5
 3c4:	88 e0       	ldi	r24, 0x08	; 8
			
			PORTB ^= (1<<PB3);
 3c6:	89 27       	eor	r24, r25
 3c8:	85 b9       	out	0x05, r24	; 5
 3ca:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <note_next>
			OCR2A = song[note_next];
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	ef 5f       	subi	r30, 0xFF	; 255
 3d2:	fe 4f       	sbci	r31, 0xFE	; 254
 3d4:	80 81       	ld	r24, Z
 3d6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 3da:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <note_length>
			
			note_length++;
 3de:	8f 5f       	subi	r24, 0xFF	; 255
 3e0:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <note_length>
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	39 f4       	brne	.+14     	; 0x3f6 <main+0xf0>

			if (note_length == 2)
 3e8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <note_length>
			{
				note_length = 0;
 3ec:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <note_next>
				note_next++;
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <note_next>
 3f6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <note_next>
			}
			if (note_next == 29)
 3fa:	8d 31       	cpi	r24, 0x1D	; 29
 3fc:	29 f4       	brne	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fe:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <note_next>
			{
				note_next = 0;
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
			}
		}
		else{
			OCR2A = 0;
 408:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <time_old_100ms>
		}
	
	
	
	}
 	if (time_old_100ms >= 100){
 40c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <time_old_100ms+0x1>
 410:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <time_old_100ms+0x2>
 414:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <time_old_100ms+0x3>
 418:	84 36       	cpi	r24, 0x64	; 100
 41a:	91 05       	cpc	r25, r1
 41c:	a1 05       	cpc	r26, r1
 41e:	b1 05       	cpc	r27, r1
 420:	08 f4       	brcc	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	89 cf       	rjmp	.-238    	; 0x336 <main+0x30>
 424:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <time_old_100ms>
 	time_old_100ms = 0;
 428:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_old_100ms+0x1>
 42c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_old_100ms+0x2>
 430:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_old_100ms+0x3>
 434:	2d d0       	rcall	.+90     	; 0x490 <sys_tick_heart>
 		sys_tick_heart();
 436:	05 e0       	ldi	r16, 0x05	; 5
 438:	10 e0       	ldi	r17, 0x00	; 0
 		int16_t x = 50;
 		
 		for (x = 5; x < 90; x++)  //testing the range of values to alter the duty%
 43a:	06 c0       	rjmp	.+12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 43c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 		{
 			int16_t CAN_temperature = x; //from can
 			uint8_t T = (uint8_t) CAN_temperature;
 			//_delay_ms(1);   //use sys timer later
 			fan_power_unit_PWM_control(T, fan_duty);
 440:	80 2f       	mov	r24, r16
 442:	3d df       	rcall	.-390    	; 0x2be <fan_power_unit_PWM_control>
 444:	0f 5f       	subi	r16, 0xFF	; 255
 446:	1f 4f       	sbci	r17, 0xFF	; 255
 	if (time_old_100ms >= 100){
 	time_old_100ms = 0;
 		sys_tick_heart();
 		int16_t x = 50;
 		
 		for (x = 5; x < 90; x++)  //testing the range of values to alter the duty%
 448:	0a 35       	cpi	r16, 0x5A	; 90
 44a:	11 05       	cpc	r17, r1
 44c:	bc f3       	brlt	.-18     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 44e:	73 cf       	rjmp	.-282    	; 0x336 <main+0x30>

00000450 <port_config>:
#include <avr/interrupt.h>

volatile unsigned long sys_time = 0;

void port_config(){  //0 input, 1 output
	DDRA = 0;   //Fuse Read Out Inputs
 450:	11 b8       	out	0x01, r1	; 1
	
	DDRB &= ~(1<<PB1);
 452:	84 b1       	in	r24, 0x04	; 4
 454:	8d 7f       	andi	r24, 0xFD	; 253
 456:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PB1);
 458:	85 b1       	in	r24, 0x05	; 5
 45a:	82 60       	ori	r24, 0x02	; 2
 45c:	85 b9       	out	0x05, r24	; 5
	MCUCR &= ~(1<<PUD);
 45e:	85 b7       	in	r24, 0x35	; 53
 460:	8f 7e       	andi	r24, 0xEF	; 239
 462:	85 bf       	out	0x35, r24	; 53

	DDRB = 0 | (1<<PB0) |(1<<PB2) | (1<<PB3) | (1<<PB4) | (1<<PB5); //WP, fan and LED outputs
 464:	8d e3       	ldi	r24, 0x3D	; 61
 466:	84 b9       	out	0x04, r24	; 4
	DDRC = 0; // Shutdown circuit just like FRO is an input (indicates the state of those pins for debugging purposes)
 468:	17 b8       	out	0x07, r1	; 7
	DDRD = 0 | (1<<PD2) | (1<<PD3) | (1<<PD5) | (1<<PD6); // timer for the buzzer and can outputs
 46a:	8c e6       	ldi	r24, 0x6C	; 108
 46c:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0; //Fuse Read Out Inputs
 46e:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0;
 470:	10 ba       	out	0x10, r1	; 16
 472:	08 95       	ret

00000474 <sys_timer_config>:
}

void sys_timer_config(){   //all previous software uses a 1ms timer/counter =>CTC with OCR0A=250
	TCCR0A |= (1<<WGM01);
 474:	84 b5       	in	r24, 0x24	; 36
 476:	88 60       	ori	r24, 0x08	; 8
 478:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<CS01) | (1<<CS00);
 47a:	84 b5       	in	r24, 0x24	; 36
 47c:	83 60       	ori	r24, 0x03	; 3
 47e:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1<<OCF0A);  //interrupt flags possible
 480:	ee e6       	ldi	r30, 0x6E	; 110
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	82 60       	ori	r24, 0x02	; 2
 488:	80 83       	st	Z, r24
	OCR0A = 250; // what timer do we need, btw the compiler doesnt like anything bigger than 300 for some reason (reason is the 2^8 bits = 256)
 48a:	8a ef       	ldi	r24, 0xFA	; 250
 48c:	87 bd       	out	0x27, r24	; 39
 48e:	08 95       	ret

00000490 <sys_tick_heart>:
}

void sys_tick_heart(){
	PORTB ^= (1<<PB4); //toggle the Heart led on Pin 4, will be controlled by the super loop in main.c
 490:	95 b1       	in	r25, 0x05	; 5
 492:	80 e1       	ldi	r24, 0x10	; 16
 494:	89 27       	eor	r24, r25
 496:	85 b9       	out	0x05, r24	; 5
 498:	08 95       	ret

0000049a <__vector_16>:
	
};

ISR(TIMER0_COMP_vect){
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	af 93       	push	r26
 4aa:	bf 93       	push	r27
	sys_time++;  //system time incremented on each interrupt flag from the CTC compare register => every OCR0A
 4ac:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <sys_time>
 4b0:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <sys_time+0x1>
 4b4:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <sys_time+0x2>
 4b8:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <sys_time+0x3>
 4bc:	01 96       	adiw	r24, 0x01	; 1
 4be:	a1 1d       	adc	r26, r1
 4c0:	b1 1d       	adc	r27, r1
 4c2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <sys_time>
 4c6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <sys_time+0x1>
 4ca:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <sys_time+0x2>
 4ce:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <sys_time+0x3>
 4d2:	bf 91       	pop	r27
 4d4:	af 91       	pop	r26
 4d6:	9f 91       	pop	r25
 4d8:	8f 91       	pop	r24
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <timer2_config>:
	OCR2A =42 ;		//	  16000000/(2*64*42) = 2976 Hz
	//sei();
		
}

void funny_function(){
 4e4:	e0 eb       	ldi	r30, 0xB0	; 176
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	8c 60       	ori	r24, 0x0C	; 12
 4ec:	80 83       	st	Z, r24
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 4f4:	8a e2       	ldi	r24, 0x2A	; 42
 4f6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 4fa:	08 95       	ret

000004fc <__vector_9>:
	
}

ISR(TIMER2_COMP_vect){ //isr fur timer2 
 4fc:	1f 92       	push	r1
 4fe:	0f 92       	push	r0
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	0f 92       	push	r0
 504:	11 24       	eor	r1, r1
 506:	8f 93       	push	r24
 508:	9f 93       	push	r25
	cli();
 50a:	f8 94       	cli
	PORTD ^= (1<<PD2);
 50c:	9b b1       	in	r25, 0x0b	; 11
 50e:	84 e0       	ldi	r24, 0x04	; 4
 510:	89 27       	eor	r24, r25
 512:	8b b9       	out	0x0b, r24	; 11
	
	sei();
 514:	78 94       	sei
		if (note_next == 4)
	{
		note_next = 0;
	}
	*/
 516:	9f 91       	pop	r25
 518:	8f 91       	pop	r24
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <__divmodhi4>:
 524:	97 fb       	bst	r25, 7
 526:	07 2e       	mov	r0, r23
 528:	16 f4       	brtc	.+4      	; 0x52e <__divmodhi4+0xa>
 52a:	00 94       	com	r0
 52c:	06 d0       	rcall	.+12     	; 0x53a <__divmodhi4_neg1>
 52e:	77 fd       	sbrc	r23, 7
 530:	08 d0       	rcall	.+16     	; 0x542 <__divmodhi4_neg2>
 532:	0b d0       	rcall	.+22     	; 0x54a <__udivmodhi4>
 534:	07 fc       	sbrc	r0, 7
 536:	05 d0       	rcall	.+10     	; 0x542 <__divmodhi4_neg2>
 538:	3e f4       	brtc	.+14     	; 0x548 <__divmodhi4_exit>

0000053a <__divmodhi4_neg1>:
 53a:	90 95       	com	r25
 53c:	81 95       	neg	r24
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	08 95       	ret

00000542 <__divmodhi4_neg2>:
 542:	70 95       	com	r23
 544:	61 95       	neg	r22
 546:	7f 4f       	sbci	r23, 0xFF	; 255

00000548 <__divmodhi4_exit>:
 548:	08 95       	ret

0000054a <__udivmodhi4>:
 54a:	aa 1b       	sub	r26, r26
 54c:	bb 1b       	sub	r27, r27
 54e:	51 e1       	ldi	r21, 0x11	; 17
 550:	07 c0       	rjmp	.+14     	; 0x560 <__udivmodhi4_ep>

00000552 <__udivmodhi4_loop>:
 552:	aa 1f       	adc	r26, r26
 554:	bb 1f       	adc	r27, r27
 556:	a6 17       	cp	r26, r22
 558:	b7 07       	cpc	r27, r23
 55a:	10 f0       	brcs	.+4      	; 0x560 <__udivmodhi4_ep>
 55c:	a6 1b       	sub	r26, r22
 55e:	b7 0b       	sbc	r27, r23

00000560 <__udivmodhi4_ep>:
 560:	88 1f       	adc	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	5a 95       	dec	r21
 566:	a9 f7       	brne	.-22     	; 0x552 <__udivmodhi4_loop>
 568:	80 95       	com	r24
 56a:	90 95       	com	r25
 56c:	bc 01       	movw	r22, r24
 56e:	cd 01       	movw	r24, r26
 570:	08 95       	ret

00000572 <_exit>:
 572:	f8 94       	cli

00000574 <__stop_program>:
 574:	ff cf       	rjmp	.-2      	; 0x574 <__stop_program>
