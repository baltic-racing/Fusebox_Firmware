
Fusebox_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  000001c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cae  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac8  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ce  00000000  00000000  00001a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bf  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  0000248f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000024ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	2e c0       	rjmp	.+92     	; 0xc2 <__vector_25>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	ab 30       	cpi	r26, 0x0B	; 11
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	3a d0       	rcall	.+116    	; 0x126 <main>
  b2:	4e c0       	rjmp	.+156    	; 0x150 <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <adc_start_conversion>:
}

void adc_start_conversion(){
	
	//start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0) | (1<<ADIE) | (1<<ADSC); //prescaler to 16 
  b6:	8d ec       	ldi	r24, 0xCD	; 205
  b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	//!!! Currently we have to Start the conversion manually with ADSC=1. Normally SMCR should auto trigger the conversion but as of now it does not work. neither do we know if the uC goes into Noise reduction mode
	SMCR = (1<<SM0)|(0<<SM1)|(0<<SM2); //enable ADC noise reduction mode and starts the conversion
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	83 bf       	out	0x33, r24	; 51
  c0:	08 95       	ret

000000c2 <__vector_25>:
}

ISR(ADC_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	0b b6       	in	r0, 0x3b	; 59
  ce:	0f 92       	push	r0
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	8f 93       	push	r24
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	
	// store ADC result
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); low bit erst ablesen
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  de:	e8 2f       	mov	r30, r24
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e6:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	ef 5f       	subi	r30, 0xFF	; 255
  f0:	fe 4f       	sbci	r31, 0xFE	; 254
  f2:	31 83       	std	Z+1, r19	; 0x01
  f4:	20 83       	st	Z, r18
	adc_next++;
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	// reset index var
	if(adc_next == 5){
  fc:	85 30       	cpi	r24, 0x05	; 5
  fe:	11 f4       	brne	.+4      	; 0x104 <__vector_25+0x42>
		adc_next = 0;
 100:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	8f 91       	pop	r24
 114:	3f 91       	pop	r19
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0b be       	out	0x3b, r0	; 59
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "adc_functions.h"
int main(void)
{	
sei(); //interrupts on
 126:	78 94       	sei
	//adc_config();
 	ADMUX = (1<<REFS0);// | (1<<MUX0) ;//| (1<<MUX1); manual config, variable Port F (ADCn)
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADIE);
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	8c e8       	ldi	r24, 0x8C	; 140
 134:	80 83       	st	Z, r24
 	ADCSRA |= (1<<ADSC); 
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
 	DIDR0 |= 1; 
 13c:	ae e7       	ldi	r26, 0x7E	; 126
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	8c 91       	ld	r24, X
 142:	81 60       	ori	r24, 0x01	; 1
 144:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADIE);
 146:	80 81       	ld	r24, Z
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	80 83       	st	Z, r24
	
	while (1)
	{
		adc_start_conversion();  //library function, ISR reads the ADC value every time a flag is placed at the end of a conversion
 14c:	b4 df       	rcall	.-152    	; 0xb6 <adc_start_conversion>
 14e:	fe cf       	rjmp	.-4      	; 0x14c <main+0x26>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
