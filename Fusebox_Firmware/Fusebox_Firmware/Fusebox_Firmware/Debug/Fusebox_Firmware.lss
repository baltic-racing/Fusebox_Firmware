
Fusebox_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000642  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080011e  0080011e  000006f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015ab  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec2  00000000  00000000  00001e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c5b  00000000  00000000  00002d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00003994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ce  00000000  00000000  00003c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000478  00000000  00000000  00004512  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000498a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	ca c2       	rjmp	.+1428   	; 0x5ba <__vector_9>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	62 c1       	rjmp	.+708    	; 0x2f6 <__vector_12>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	8b c2       	rjmp	.+1302   	; 0x558 <__vector_16>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	44 c0       	rjmp	.+136    	; 0xee <__vector_25>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e2 e4       	ldi	r30, 0x42	; 66
  a8:	f6 e0       	ldi	r31, 0x06	; 6
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ae 31       	cpi	r26, 0x1E	; 30
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	ae e1       	ldi	r26, 0x1E	; 30
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a0 34       	cpi	r26, 0x40	; 64
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	a2 d1       	rcall	.+836    	; 0x410 <main>
  cc:	b8 c2       	rjmp	.+1392   	; 0x63e <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_config>:
uint8_t adc_next = 0;



void adc_config(){
	ADMUX = (1<<REFS0); // AREF = AVcc and PF0 (ADC0) as input defined
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0) | (1<<ADIE);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8c e8       	ldi	r24, 0x8C	; 140
  dc:	80 83       	st	Z, r24
	// ADEN enables ADC
	// ADIE enables ADC interrupt
	// ADPS (Prescaler) 16
	// see datasheet page 290
	ADCSRA |= (1<<ADSC); //start first conversion
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <adc_start_conversion>:
}

void adc_start_conversion(){
	//start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADSC);
  e6:	88 ec       	ldi	r24, 0xC8	; 200
  e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ec:	08 95       	ret

000000ee <__vector_25>:
}

ISR(ADC_vect){
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	0b b6       	in	r0, 0x3b	; 59
  fa:	0f 92       	push	r0
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	//cli();
	// store ADC result
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); //low bit erst ablesen
 114:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 118:	e8 2f       	mov	r30, r24
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 120:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	e4 5c       	subi	r30, 0xC4	; 196
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	31 83       	std	Z+1, r19	; 0x01
 12e:	20 83       	st	Z, r18
	adc_next++;
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	//adc_values[0] = (ADC*5)/1023;  //cant decide where in the code this should go without testing
	//adc_values[1] = ((ADC*5)/1023)+((10000*(ADC*5)/1023)/2500); //no way this is efficient, needs to be optimized later
	// reset index var
	//sei();
	if(adc_next == ADCVALUES){
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	11 f4       	brne	.+4      	; 0x13e <__vector_25+0x50>
		adc_next = 0;
 13a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 13e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 142:	80 64       	ori	r24, 0x40	; 64
 144:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	adc_start_conversion();
 148:	ce df       	rcall	.-100    	; 0xe6 <adc_start_conversion>
	
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0b be       	out	0x3b, r0	; 59
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <adc_get>:

// getter for each adc var
uint16_t adc_get(uint8_t adc){
	return adc_values[adc];
 170:	e8 2f       	mov	r30, r24
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	e4 5c       	subi	r30, 0xC4	; 196
 17a:	fe 4f       	sbci	r31, 0xFE	; 254
}
 17c:	80 81       	ld	r24, Z
 17e:	91 81       	ldd	r25, Z+1	; 0x01
 180:	08 95       	ret

00000182 <can_check_free>:
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	78 f0       	brcs	.+30     	; 0x1a4 <can_check_free+0x22>
 186:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 97       	sbiw	r24, 0x08	; 8
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <can_check_free+0x14>
 192:	35 95       	asr	r19
 194:	27 95       	ror	r18
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <can_check_free+0x10>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	20 ff       	sbrs	r18, 0
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <can_check_free+0x38>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret
 1a4:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <can_check_free+0x2e>
 1ac:	35 95       	asr	r19
 1ae:	27 95       	ror	r18
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <can_check_free+0x2a>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	20 fd       	sbrc	r18, 0
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	08 95       	ret

000001bc <can_cfg>:
 1bc:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	29 c0       	rjmp	.+82     	; 0x216 <can_cfg+0x5a>
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	48 9f       	mul	r20, r24
 1c8:	90 01       	movw	r18, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	82 2f       	mov	r24, r18
 1ce:	88 60       	ori	r24, 0x08	; 8
 1d0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 1d4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 1d8:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1dc:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 1e0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 1e4:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 1e8:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 1ec:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
 1f0:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
 1f4:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
 1f8:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <can_cfg+0x54>
 200:	98 2f       	mov	r25, r24
 202:	92 2b       	or	r25, r18
 204:	98 60       	ori	r25, 0x08	; 8
 206:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 20a:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	88 30       	cpi	r24, 0x08	; 8
 212:	b0 f3       	brcs	.-20     	; 0x200 <can_cfg+0x44>
 214:	4f 5f       	subi	r20, 0xFF	; 255
 216:	4f 30       	cpi	r20, 0x0F	; 15
 218:	a8 f2       	brcs	.-86     	; 0x1c4 <can_cfg+0x8>
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 226:	87 e3       	ldi	r24, 0x37	; 55
 228:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 22c:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
 230:	e8 ed       	ldi	r30, 0xD8	; 216
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	82 60       	ori	r24, 0x02	; 2
 238:	80 83       	st	Z, r24
 23a:	08 95       	ret

0000023c <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
	
	for(uint8_t byte = 0; byte <8; byte++){
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	10 c0       	rjmp	.+32     	; 0x266 <can_tx+0x2a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	30 e1       	ldi	r19, 0x10	; 16
 24a:	83 9f       	mul	r24, r19
 24c:	c0 01       	movw	r24, r0
 24e:	11 24       	eor	r1, r1
 250:	82 2b       	or	r24, r18
 252:	88 60       	ori	r24, 0x08	; 8
 254:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANMSG = data[byte];
 258:	fb 01       	movw	r30, r22
 25a:	e2 0f       	add	r30, r18
 25c:	f1 1d       	adc	r31, r1
 25e:	80 81       	ld	r24, Z
 260:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
 264:	2f 5f       	subi	r18, 0xFF	; 255
 266:	28 30       	cpi	r18, 0x08	; 8
 268:	70 f3       	brcs	.-36     	; 0x246 <can_tx+0xa>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
 26a:	8a 81       	ldd	r24, Y+2	; 0x02
 26c:	82 95       	swap	r24
 26e:	80 7f       	andi	r24, 0xF0	; 240
 270:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_send->mob_number)){
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	85 df       	rcall	.-246    	; 0x182 <can_check_free>
 278:	88 23       	and	r24, r24
 27a:	09 f1       	breq	.+66     	; 0x2be <can_tx+0x82>
		CANSTMOB = 0;
 27c:	ee ee       	ldi	r30, 0xEE	; 238
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
 282:	88 81       	ld	r24, Y
 284:	86 95       	lsr	r24
 286:	86 95       	lsr	r24
 288:	86 95       	lsr	r24
 28a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
 28e:	88 81       	ld	r24, Y
 290:	20 e2       	ldi	r18, 0x20	; 32
 292:	82 9f       	mul	r24, r18
 294:	c0 01       	movw	r24, r0
 296:	11 24       	eor	r1, r1
 298:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 29c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
 2a0:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0; //0b11111111;
 2a4:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0; //0b11100000;
 2a8:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 2ac:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 2b0:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANSTMOB = 0;
 2b4:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
 2b6:	88 e4       	ldi	r24, 0x48	; 72
 2b8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 2bc:	10 82       	st	Z, r1
	}
	
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <timer1_config>:
void fan_power_unit_control(){
	
}

void timer1_config(){	
	DDRB |= (1<<PB6);
 2c4:	84 b1       	in	r24, 0x04	; 4
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	84 b9       	out	0x04, r24	; 4
	//PORTB |= (1<<PB6);							//using mode 15 right now
TCCR1A = (1<<WGM11) | (1<<WGM10)	  // ?can use mode 14 with static frequency, variable duty cycle when OCR1A is incremented
 2ca:	83 e6       	ldi	r24, 0x63	; 99
 2cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		| (0<<COM1A1) | (1<<COM1A0) | (1<<COM1B1);// | (1<<CS11);  //NO PRESCALER HERE!!!! pre goes to the B counter
TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11);// | (1<<CS10);  //mode 14, need to set prescaler to 1, otherwise timer goes inactive and nothing happens
 2d0:	8a e1       	ldi	r24, 0x1A	; 26
 2d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		
TIMSK1 = (1<<OCIE1A);		//interrupts on?
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
//ICR1 = 250;   //       16000000/(8*(1+64)) = 30769.23077 Hz   //with TOP value 62+1 the resolution is 6 bit
OCR1A = 31; 
 2dc:	8f e1       	ldi	r24, 0x1F	; 31
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
OCR1B = 30;	//50% duty?, changing this does nothing to the blinky so far
 2e8:	8e e1       	ldi	r24, 0x1E	; 30
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2f0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 2f4:	08 95       	ret

000002f6 <__vector_12>:
// WGM1[1:0]	= 11;
// COM1[1:0]	= 11;
// CS1[2:0]`	= 010;
}

ISR(TIMER1_COMPA_vect){
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	8f 93       	push	r24
 302:	9f 93       	push	r25
PORTB ^= (1<<PB3);
 304:	95 b1       	in	r25, 0x05	; 5
 306:	88 e0       	ldi	r24, 0x08	; 8
 308:	89 27       	eor	r24, r25
 30a:	85 b9       	out	0x05, r24	; 5
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <fuse_read_out>:


uint16_t fuse_read_out(){
	//shifting bits so  that an input in the register is always gonna be read as 1 (1 means a Fuse is in, 0 means a fuse is out), otherwise a Fuse 0b00000010 is a decimal 2
																												// with the  shit operation 0b00000010>>1 is a decimal 1 (0b00000001)
	FRO_Aim_EVO			=	(PINA & 0b00000001); //no need to shift 
 31a:	40 b1       	in	r20, 0x00	; 0
 31c:	84 2f       	mov	r24, r20
 31e:	81 70       	andi	r24, 0x01	; 1
 320:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <FRO_Aim_EVO>
	FRO_Shutdown		=	(PINA & 0b00000010)>>1;  //FRO_Shutdown at PA1, 1st bit of that register, therefore we shift the 1st bit to the 0th bit
 324:	40 b1       	in	r20, 0x00	; 0
 326:	42 70       	andi	r20, 0x02	; 2
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	55 95       	asr	r21
 32c:	47 95       	ror	r20
 32e:	40 93 29 01 	sts	0x0129, r20	; 0x800129 <FRO_Shutdown>
	FRO_Brakelight		=	(PINA & 0b00000100)>>2;  //alternative way of writing this is PINA & (1<<PB2), meaning it reads out the state of the register at the bit of PIN 2 (2nd bit) (the bit still is not shifted in this form => (PINA & (1<<PB2))>>2)
 332:	20 b1       	in	r18, 0x00	; 0
 334:	24 70       	andi	r18, 0x04	; 4
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	35 95       	asr	r19
 33a:	27 95       	ror	r18
 33c:	35 95       	asr	r19
 33e:	27 95       	ror	r18
 340:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <FRO_Brakelight>
	FRO_24V				=	(PINA & 0b00001000)>>3;
 344:	60 b1       	in	r22, 0x00	; 0
 346:	68 70       	andi	r22, 0x08	; 8
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	75 95       	asr	r23
 34c:	67 95       	ror	r22
 34e:	75 95       	asr	r23
 350:	67 95       	ror	r22
 352:	75 95       	asr	r23
 354:	67 95       	ror	r22
 356:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <FRO_24V>
	
	FRO_HV_Distri		=	(PINE & 0b00000001);
 35a:	9c b1       	in	r25, 0x0c	; 12
 35c:	91 70       	andi	r25, 0x01	; 1
 35e:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <FRO_HV_Distri>
	FRO_TSAL			=	(PINE & 0b00000010)>>1;
 362:	6c b1       	in	r22, 0x0c	; 12
 364:	62 70       	andi	r22, 0x02	; 2
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	75 95       	asr	r23
 36a:	67 95       	ror	r22
 36c:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <FRO_TSAL>
	FRO_TSAC			=	(PINE & 0b00000100)>>2;
 370:	6c b1       	in	r22, 0x0c	; 12
 372:	64 70       	andi	r22, 0x04	; 4
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	75 95       	asr	r23
 378:	67 95       	ror	r22
 37a:	75 95       	asr	r23
 37c:	67 95       	ror	r22
 37e:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <FRO_TSAC>
	FRO_INV0			=	(PINE & 0b00001000)>>3;
 382:	6c b1       	in	r22, 0x0c	; 12
 384:	68 70       	andi	r22, 0x08	; 8
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	75 95       	asr	r23
 38a:	67 95       	ror	r22
 38c:	75 95       	asr	r23
 38e:	67 95       	ror	r22
 390:	75 95       	asr	r23
 392:	67 95       	ror	r22
 394:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <FRO_INV0>
	FRO_INV1			=	(PINE & 0b00010000)>>4;
 398:	6c b1       	in	r22, 0x0c	; 12
 39a:	60 71       	andi	r22, 0x10	; 16
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	75 95       	asr	r23
 3a0:	67 95       	ror	r22
 3a2:	75 95       	asr	r23
 3a4:	67 95       	ror	r22
 3a6:	75 95       	asr	r23
 3a8:	67 95       	ror	r22
 3aa:	75 95       	asr	r23
 3ac:	67 95       	ror	r22
 3ae:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <FRO_INV1>
	FRO_FAN_PU_Sup		=	(PINE & 0b00100000)>>5;
 3b2:	6c b1       	in	r22, 0x0c	; 12
 3b4:	60 72       	andi	r22, 0x20	; 32
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	75 95       	asr	r23
 3ba:	67 95       	ror	r22
 3bc:	75 95       	asr	r23
 3be:	67 95       	ror	r22
 3c0:	75 95       	asr	r23
 3c2:	67 95       	ror	r22
 3c4:	75 95       	asr	r23
 3c6:	67 95       	ror	r22
 3c8:	75 95       	asr	r23
 3ca:	67 95       	ror	r22
 3cc:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <FRO_FAN_PU_Sup>
	FRO_FAN_ACC_Sup		=	(PINE & 0b01000000)>>6;
 3d0:	6c b1       	in	r22, 0x0c	; 12
 3d2:	60 74       	andi	r22, 0x40	; 64
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	06 2e       	mov	r0, r22
 3d8:	67 2f       	mov	r22, r23
 3da:	00 0c       	add	r0, r0
 3dc:	66 1f       	adc	r22, r22
 3de:	77 0b       	sbc	r23, r23
 3e0:	00 0c       	add	r0, r0
 3e2:	66 1f       	adc	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <FRO_FAN_ACC_Sup>
	FRO_WP_Sup			=	(PINE & 0b10000000)>>7;
 3ea:	9c b1       	in	r25, 0x0c	; 12
 3ec:	99 1f       	adc	r25, r25
 3ee:	99 27       	eor	r25, r25
 3f0:	99 1f       	adc	r25, r25
 3f2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <FRO_WP_Sup>
	
//code that sends the pin states using CAN comes here? just throw all the data into an Integer that will later be sent using CAN
uint8_t Fuse_States = 0;

 /* set bits of this integer to correspond with our 11 fuses*/
Fuse_States |= (FRO_Aim_EVO<<0) | (FRO_Shutdown<<1) | (FRO_Brakelight<<2/*>>0b0000000000000010*/) | (FRO_24V>>3) | (FRO_HV_Distri>>4) | (FRO_TSAL>>5) | (FRO_TSAC>>6) | (FRO_INV0>>7) | (FRO_INV1>>8) | (FRO_FAN_PU_Sup>>9) | (FRO_FAN_ACC_Sup>>10) | (FRO_WP_Sup>>11);
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	44 0f       	add	r20, r20
 3fa:	55 1f       	adc	r21, r21
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
 402:	22 0f       	add	r18, r18
 404:	33 1f       	adc	r19, r19
 406:	48 2b       	or	r20, r24
 408:	84 2f       	mov	r24, r20
 40a:	82 2b       	or	r24, r18

/* all fuses being a logical 1 (fuse is IN) give us the following value : 0b0000011111111111 = 11d , because we shifted fuse bits in the read function, we can just 
assign those 1s to any bit within our 16 bit integer, just like we do with registers*/
return Fuse_States;

 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	08 95       	ret

00000410 <main>:
uint8_t song[29];
uint8_t note_next ;



int main(void){
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	2b 97       	sbiw	r28, 0x0b	; 11
 41a:	0f b6       	in	r0, 0x3f	; 63
 41c:	f8 94       	cli
 41e:	de bf       	out	0x3e, r29	; 62
 420:	0f be       	out	0x3f, r0	; 63
 422:	cd bf       	out	0x3d, r28	; 61
	
	can_cfg();
 424:	cb de       	rcall	.-618    	; 0x1bc <can_cfg>
	//can_check_free();

	fuse_read_out();
 426:	79 df       	rcall	.-270    	; 0x31a <fuse_read_out>
	port_config(); 
 428:	77 d0       	rcall	.+238    	; 0x518 <port_config>
	sys_timer_config();
 42a:	88 d0       	rcall	.+272    	; 0x53c <sys_timer_config>
	adc_config();
 42c:	51 de       	rcall	.-862    	; 0xd0 <adc_config>
 42e:	b9 d0       	rcall	.+370    	; 0x5a2 <timer2_config>
	timer2_config();
 430:	49 df       	rcall	.-366    	; 0x2c4 <timer1_config>
 432:	78 94       	sei
	timer1_config();
 434:	19 82       	std	Y+1, r1	; 0x01
 436:	1a 82       	std	Y+2, r1	; 0x02
	
	sei();
 438:	1b 82       	std	Y+3, r1	; 0x03


	struct CAN_MOB can_FB_mob;//data to send  FB = fusebox, outgoing fusebox message with its 8 dataBYTES
	can_FB_mob.mob_id = 0;
 43a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	can_FB_mob.mob_idmask = 0;
	can_FB_mob.mob_number = 0;
 43e:	90 e0       	ldi	r25, 0x00	; 0

	while (1)
	{
		
		//duty cycle!!!
		if (sys_time >= heart_beat)		{ 
 440:	a0 e0       	ldi	r26, 0x00	; 0
 442:	b0 e0       	ldi	r27, 0x00	; 0
 444:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <sys_time>
 448:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <sys_time+0x1>
 44c:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <sys_time+0x2>
 450:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <sys_time+0x3>
 454:	48 17       	cp	r20, r24
 456:	59 07       	cpc	r21, r25
 458:	6a 07       	cpc	r22, r26
 45a:	7b 07       	cpc	r23, r27
 45c:	20 f1       	brcs	.+72     	; 0x4a6 <main+0x96>
 45e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <sys_time>
 462:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <sys_time+0x1>
			//sys_tick_heart();
			//PORTB ^= (1<<PB4); 
			sys_time = 0;	
 466:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <sys_time+0x2>
 46a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <sys_time+0x3>
 46e:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <note_next>
 472:	f0 e0       	ldi	r31, 0x00	; 0
			OCR2A = song[note_next];
 474:	ef 5f       	subi	r30, 0xFF	; 255
 476:	fe 4f       	sbci	r31, 0xFE	; 254
 478:	80 81       	ld	r24, Z
 47a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 47e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <note_length>
 482:	8f 5f       	subi	r24, 0xFF	; 255
	
	note_length++;
 484:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <note_length>
 488:	83 33       	cpi	r24, 0x33	; 51
 48a:	39 f4       	brne	.+14     	; 0x49a <main+0x8a>
 48c:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <note_length>

	if (note_length == 51)
 490:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <note_next>
	{
		note_length = 0;
 494:	8f 5f       	subi	r24, 0xFF	; 255
		note_next++;	
 496:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <note_next>
 49a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <note_next>
 49e:	8d 31       	cpi	r24, 0x1D	; 29
	}
		if (note_next == 29)
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <main+0x96>
 4a2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <note_next>
 4a6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <sys_time>
		{
			note_next = 0;
 4aa:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <sys_time+0x1>
		}
										}

	if((sys_time - time_old) >= 10){  //10ms
 4ae:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <sys_time+0x2>
 4b2:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <sys_time+0x3>
 4b6:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <time_old>
 4ba:	50 91 2c 01 	lds	r21, 0x012C	; 0x80012c <time_old+0x1>
 4be:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <time_old+0x2>
 4c2:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <time_old+0x3>
 4c6:	8c 01       	movw	r16, r24
 4c8:	9d 01       	movw	r18, r26
 4ca:	04 1b       	sub	r16, r20
 4cc:	15 0b       	sbc	r17, r21
 4ce:	26 0b       	sbc	r18, r22
 4d0:	37 0b       	sbc	r19, r23
 4d2:	0a 30       	cpi	r16, 0x0A	; 10
 4d4:	11 05       	cpc	r17, r1
 4d6:	21 05       	cpc	r18, r1
 4d8:	31 05       	cpc	r19, r1
 4da:	08 f4       	brcc	.+2      	; 0x4de <main+0xce>
 4dc:	ae cf       	rjmp	.-164    	; 0x43a <main+0x2a>
 4de:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <time_old>
 4e2:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <time_old+0x1>
				time_old = sys_time;
 4e6:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <time_old+0x2>
 4ea:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <time_old+0x3>
				//time_old_100++; use for a longer loop later

//fuse_read_out()&0xff			// input &0xff gives you the first byte (8bit) (least significant byte)
//(fuse_read_out()>>8)&0xff		//shifting 1 byte to the right gives us the next 8 bit bundle, now we've read the full 16 bit value

	FB_databytes[0]	= fuse_read_out()&0xff		;			//  lsb
 4ee:	15 df       	rcall	.-470    	; 0x31a <fuse_read_out>
 4f0:	8c 83       	std	Y+4, r24	; 0x04
	FB_databytes[1]	= (fuse_read_out()>>8)&0xff	;			//  msb
 4f2:	13 df       	rcall	.-474    	; 0x31a <fuse_read_out>
 4f4:	9d 83       	std	Y+5, r25	; 0x05
	FB_databytes[2]	= SCI_read_out()			;			// fits in 8 bits
 4f6:	75 d0       	rcall	.+234    	; 0x5e2 <SCI_read_out>
 4f8:	8e 83       	std	Y+6, r24	; 0x06
 4fa:	80 e0       	ldi	r24, 0x00	; 0
	FB_databytes[3]	= adc_get(0)				;
 4fc:	39 de       	rcall	.-910    	; 0x170 <adc_get>
 4fe:	8f 83       	std	Y+7, r24	; 0x07
 500:	81 e0       	ldi	r24, 0x01	; 1
	FB_databytes[4]	= adc_get(1)				;  
 502:	36 de       	rcall	.-916    	; 0x170 <adc_get>
 504:	88 87       	std	Y+8, r24	; 0x08
 506:	1a 86       	std	Y+10, r1	; 0x0a
 508:	1b 86       	std	Y+11, r1	; 0x0b
	FB_databytes[6]	= 0							;
 50a:	be 01       	movw	r22, r28
	FB_databytes[7]	= 0							;
 50c:	6c 5f       	subi	r22, 0xFC	; 252
		
	
	can_tx(&can_FB_mob, FB_databytes);  //& is a reference operator 
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	ce 01       	movw	r24, r28
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	93 de       	rcall	.-730    	; 0x23c <can_tx>
 516:	91 cf       	rjmp	.-222    	; 0x43a <main+0x2a>

00000518 <port_config>:
 518:	11 b8       	out	0x01, r1	; 1
 51a:	84 b1       	in	r24, 0x04	; 4
 51c:	8d 7f       	andi	r24, 0xFD	; 253
	TIMSK0 |= (1<<OCF0A);  //interrupt flags possible
	OCR0A = 250; // what timer do we need, btw the compiler doesnt like anything bigger than 300 for some reason (reason is the 2^8 bits = 256)
}

void sys_tick_heart(){
	PORTB ^= (1<<PB4); //toggle the Heart led on Pin 4, will be controlled by the super loop in main.c
 51e:	84 b9       	out	0x04, r24	; 4
 520:	85 b1       	in	r24, 0x05	; 5
 522:	82 60       	ori	r24, 0x02	; 2
 524:	85 b9       	out	0x05, r24	; 5
 526:	85 b7       	in	r24, 0x35	; 53
 528:	8f 7e       	andi	r24, 0xEF	; 239
 52a:	85 bf       	out	0x35, r24	; 53
 52c:	8d e3       	ldi	r24, 0x3D	; 61
 52e:	84 b9       	out	0x04, r24	; 4
 530:	17 b8       	out	0x07, r1	; 7
 532:	8c e6       	ldi	r24, 0x6C	; 108
 534:	8a b9       	out	0x0a, r24	; 10
 536:	1d b8       	out	0x0d, r1	; 13
 538:	10 ba       	out	0x10, r1	; 16
 53a:	08 95       	ret

0000053c <sys_timer_config>:
 53c:	84 b5       	in	r24, 0x24	; 36
 53e:	88 60       	ori	r24, 0x08	; 8
 540:	84 bd       	out	0x24, r24	; 36
 542:	84 b5       	in	r24, 0x24	; 36
 544:	83 60       	ori	r24, 0x03	; 3
 546:	84 bd       	out	0x24, r24	; 36
 548:	ee e6       	ldi	r30, 0x6E	; 110
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	82 60       	ori	r24, 0x02	; 2
 550:	80 83       	st	Z, r24
 552:	8a ef       	ldi	r24, 0xFA	; 250
 554:	87 bd       	out	0x27, r24	; 39
 556:	08 95       	ret

00000558 <__vector_16>:
	
};

ISR(TIMER0_COMP_vect){
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	af 93       	push	r26
 568:	bf 93       	push	r27
	sys_time++;  //system time incremented on each interrupt flag from the CTC compare register => every OCR0A
 56a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <sys_time>
 56e:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <sys_time+0x1>
 572:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <sys_time+0x2>
 576:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <sys_time+0x3>
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	a1 1d       	adc	r26, r1
 57e:	b1 1d       	adc	r27, r1
 580:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <sys_time>
 584:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <sys_time+0x1>
 588:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <sys_time+0x2>
 58c:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <sys_time+0x3>
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <timer2_config>:
	OCR2A =42 ;		//	  16000000/(2*64*42) = 2976 Hz
	//sei();
		
}

void funny_function(){
 5a2:	e0 eb       	ldi	r30, 0xB0	; 176
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	8c 60       	ori	r24, 0x0C	; 12
 5aa:	80 83       	st	Z, r24
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 5b2:	8a e2       	ldi	r24, 0x2A	; 42
 5b4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 5b8:	08 95       	ret

000005ba <__vector_9>:
	
}

ISR(TIMER2_COMP_vect){ //isr fur timer2 
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
	cli();
 5c8:	f8 94       	cli
	PORTD ^= (1<<PD2);
 5ca:	9b b1       	in	r25, 0x0b	; 11
 5cc:	84 e0       	ldi	r24, 0x04	; 4
 5ce:	89 27       	eor	r24, r25
 5d0:	8b b9       	out	0x0b, r24	; 11
	sei();
 5d2:	78 94       	sei
		if (note_next == 4)
	{
		note_next = 0;
	}
	*/
 5d4:	9f 91       	pop	r25
 5d6:	8f 91       	pop	r24
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <SCI_read_out>:
 uint8_t	SCI_HV_Distri_5V	=	0;
 uint8_t	SCI_SDB_Right_5V	=	0;
 uint8_t	SCI_INV1_5V			=	0;
 
uint8_t /* no need for 16*/ SCI_read_out(){
	SCI_TSMS_5V			=	(PINA & 00000001);
 5e2:	20 b1       	in	r18, 0x00	; 0
 5e4:	62 2f       	mov	r22, r18
 5e6:	61 70       	andi	r22, 0x01	; 1
 5e8:	60 93 3b 01 	sts	0x013B, r22	; 0x80013b <SCI_TSMS_5V>
	SCI_INV0_5V			=	(PINA & 00000010)>>1;
 5ec:	90 b1       	in	r25, 0x00	; 0
 5ee:	98 70       	andi	r25, 0x08	; 8
 5f0:	29 2f       	mov	r18, r25
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	35 95       	asr	r19
 5f6:	27 95       	ror	r18
 5f8:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <SCI_INV0_5V>
	SCI_TSAC_5V			=	(PINA & 00000100)>>2;
 5fc:	40 b1       	in	r20, 0x00	; 0
 5fe:	40 74       	andi	r20, 0x40	; 64
 600:	50 e0       	ldi	r21, 0x00	; 0
 602:	55 95       	asr	r21
 604:	47 95       	ror	r20
 606:	55 95       	asr	r21
 608:	47 95       	ror	r20
 60a:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <SCI_TSAC_5V>
	SCI_SDB_Left_5V		=	(PINA & 00001000)>>3;
 60e:	80 b1       	in	r24, 0x00	; 0
 610:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <SCI_SDB_Left_5V>
	SCI_HV_Distri_5V	=	(PINA & 00010000)>>4;
 614:	80 b1       	in	r24, 0x00	; 0
 616:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <SCI_HV_Distri_5V>
	SCI_SDB_Right_5V	=	(PINA & 00100000)>>5;
 61a:	80 b1       	in	r24, 0x00	; 0
 61c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <SCI_SDB_Right_5V>
	SCI_INV1_5V			=	(PINA & 01000000)>>6;
 620:	80 b1       	in	r24, 0x00	; 0
 622:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <SCI_INV1_5V>
	
	
uint8_t SCI_States = 0;
SCI_States |= (SCI_TSMS_5V<<0) | (SCI_INV0_5V<<1) | (SCI_TSAC_5V<<2) | (SCI_SDB_Left_5V<<3) | (SCI_HV_Distri_5V<<4) | (SCI_SDB_Right_5V<<5) | (SCI_INV1_5V);
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	22 0f       	add	r18, r18
 62a:	33 1f       	adc	r19, r19
 62c:	84 2f       	mov	r24, r20
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	26 2b       	or	r18, r22
//data that will be sent through CAN packaged into SCI states variable
return SCI_States;

}
 63a:	82 2b       	or	r24, r18
 63c:	08 95       	ret

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>
