
Fusebox_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800100  00800100  00000462  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ece  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc2  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047b  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bc  00000000  00000000  000025fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000183  00000000  00000000  00002cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002e3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8f c1       	rjmp	.+798    	; 0x360 <__vector_16>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__vector_25>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	af 31       	cpi	r26, 0x1F	; 31
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	ea d0       	rcall	.+468    	; 0x286 <main>
  b2:	9b c1       	rjmp	.+822    	; 0x3ea <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <adc_config>:
uint8_t adc_next = 0;



void adc_config(){
	ADMUX = (1<<REFS0); // AREF = AVcc and PF0 (ADC0) as input defined
  b6:	80 e4       	ldi	r24, 0x40	; 64
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0) | (1<<ADIE);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	8c e8       	ldi	r24, 0x8C	; 140
  c2:	80 83       	st	Z, r24
	// ADEN enables ADC
	// ADIE enables ADC interrupt
	// see datasheet page 290
	ADCSRA |= (1<<ADSC); //start first conversion
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <adc_start_conversion>:
}

void adc_start_conversion(){
	//start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADSC);
  cc:	88 ec       	ldi	r24, 0xC8	; 200
  ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  d2:	08 95       	ret

000000d4 <__vector_25>:
}

ISR(ADC_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	0b b6       	in	r0, 0x3b	; 59
  e0:	0f 92       	push	r0
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	
	// store ADC result
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); //low bit erst ablesen
 102:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	e2 2f       	mov	r30, r18
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	c8 e7       	ldi	r28, 0x78	; 120
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	88 81       	ld	r24, Y
 110:	99 81       	ldd	r25, Y+1	; 0x01
 112:	03 e1       	ldi	r16, 0x13	; 19
 114:	11 e0       	ldi	r17, 0x01	; 1
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	ed 5e       	subi	r30, 0xED	; 237
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	91 83       	std	Z+1, r25	; 0x01
 120:	80 83       	st	Z, r24
	adc_next++;
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	adc_values[0] = (ADC*5)/1023;  //cant decide where in the code this should go without testing
 128:	88 81       	ld	r24, Y
 12a:	99 81       	ldd	r25, Y+1	; 0x01
 12c:	ac 01       	movw	r20, r24
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	84 0f       	add	r24, r20
 138:	95 1f       	adc	r25, r21
 13a:	ef ef       	ldi	r30, 0xFF	; 255
 13c:	f3 e0       	ldi	r31, 0x03	; 3
 13e:	bf 01       	movw	r22, r30
 140:	34 d1       	rcall	.+616    	; 0x3aa <__udivmodhi4>
 142:	d8 01       	movw	r26, r16
 144:	6d 93       	st	X+, r22
 146:	7c 93       	st	X, r23
	adc_values[1] = ((ADC*5)/1023)+((10000*(ADC*5)/1023)/2500); //no way this is efficient, needs to be optimized later
 148:	88 81       	ld	r24, Y
 14a:	99 81       	ldd	r25, Y+1	; 0x01
 14c:	88 81       	ld	r24, Y
 14e:	99 81       	ldd	r25, Y+1	; 0x01
 150:	ac 01       	movw	r20, r24
 152:	44 0f       	add	r20, r20
 154:	55 1f       	adc	r21, r21
 156:	44 0f       	add	r20, r20
 158:	55 1f       	adc	r21, r21
 15a:	84 0f       	add	r24, r20
 15c:	95 1f       	adc	r25, r21
 15e:	bf 01       	movw	r22, r30
 160:	24 d1       	rcall	.+584    	; 0x3aa <__udivmodhi4>
 162:	f8 01       	movw	r30, r16
 164:	73 83       	std	Z+3, r23	; 0x03
 166:	62 83       	std	Z+2, r22	; 0x02
	// reset index var
	if(adc_next == ADCVALUES){
 168:	22 30       	cpi	r18, 0x02	; 2
 16a:	11 f4       	brne	.+4      	; 0x170 <__vector_25+0x9c>
		adc_next = 0;
 16c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	adc_start_conversion();
 17a:	a8 df       	rcall	.-176    	; 0xcc <adc_start_conversion>
	
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	0f 90       	pop	r0
 19e:	0b be       	out	0x3b, r0	; 59
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <fuse_read_out>:


uint16_t fuse_read_out(){
	//shifting bits so  that an input in the register is always gonna be read as 1 (1 means a Fuse is in, 0 means a fuse is out), otherwise a Fuse 0b00000010 is a decimal 2
																												// with the  shit operation 0b00000010>>1 is a decimal 1 (0b00000001)
	FRO_Aim_EVO			=	(PINA & 0b00000001); //no need to shift 
 1aa:	80 b1       	in	r24, 0x00	; 0
 1ac:	81 70       	andi	r24, 0x01	; 1
 1ae:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <FRO_Aim_EVO>
	FRO_Shutdown		=	(PINA & 0b00000010)>>1;  //FRO_Shutdown at PA1, 1st bit of that register, therefore we shift the 1st bit to the 0th bit
 1b2:	80 b1       	in	r24, 0x00	; 0
 1b4:	82 70       	andi	r24, 0x02	; 2
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	95 95       	asr	r25
 1ba:	87 95       	ror	r24
 1bc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <FRO_Shutdown>
	FRO_Brakelight		=	(PINA & 0b00000100)>>2;  //alternative way of writing this is PINA & (1<<PB2), meaning it reads out the state of the register at the bit of PIN 2 (2nd bit) (the bit still is not shifted in this form => (PINA & (1<<PB2))>>2 ?)
 1c0:	80 b1       	in	r24, 0x00	; 0
 1c2:	84 70       	andi	r24, 0x04	; 4
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	95 95       	asr	r25
 1c8:	87 95       	ror	r24
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <FRO_Brakelight>
	FRO_24V				=	(PINA & 0b00001000)>>3;
 1d2:	80 b1       	in	r24, 0x00	; 0
 1d4:	88 70       	andi	r24, 0x08	; 8
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	95 95       	asr	r25
 1da:	87 95       	ror	r24
 1dc:	95 95       	asr	r25
 1de:	87 95       	ror	r24
 1e0:	95 95       	asr	r25
 1e2:	87 95       	ror	r24
 1e4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <FRO_24V>
	
	FRO_HV_Distri		=	(PINE & 0b00000001);
 1e8:	8c b1       	in	r24, 0x0c	; 12
 1ea:	81 70       	andi	r24, 0x01	; 1
 1ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <FRO_HV_Distri>
	FRO_TSAL			=	(PINE & 0b00000010)>>1;
 1f0:	8c b1       	in	r24, 0x0c	; 12
 1f2:	82 70       	andi	r24, 0x02	; 2
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	95 95       	asr	r25
 1f8:	87 95       	ror	r24
 1fa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <FRO_TSAL>
	FRO_TSAC			=	(PINE & 0b00000100)>>2;
 1fe:	8c b1       	in	r24, 0x0c	; 12
 200:	84 70       	andi	r24, 0x04	; 4
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	95 95       	asr	r25
 206:	87 95       	ror	r24
 208:	95 95       	asr	r25
 20a:	87 95       	ror	r24
 20c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <FRO_TSAC>
	FRO_INV0			=	(PINE & 0b00001000)>>3;
 210:	8c b1       	in	r24, 0x0c	; 12
 212:	88 70       	andi	r24, 0x08	; 8
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	95 95       	asr	r25
 218:	87 95       	ror	r24
 21a:	95 95       	asr	r25
 21c:	87 95       	ror	r24
 21e:	95 95       	asr	r25
 220:	87 95       	ror	r24
 222:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <FRO_INV0>
	FRO_INV1			=	(PINE & 0b00010000)>>4;
 226:	8c b1       	in	r24, 0x0c	; 12
 228:	80 71       	andi	r24, 0x10	; 16
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	95 95       	asr	r25
 22e:	87 95       	ror	r24
 230:	95 95       	asr	r25
 232:	87 95       	ror	r24
 234:	95 95       	asr	r25
 236:	87 95       	ror	r24
 238:	95 95       	asr	r25
 23a:	87 95       	ror	r24
 23c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <FRO_INV1>
	FRO_FAN_PU_Sup		=	(PINE & 0b00100000)>>5;
 240:	8c b1       	in	r24, 0x0c	; 12
 242:	80 72       	andi	r24, 0x20	; 32
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	95 95       	asr	r25
 248:	87 95       	ror	r24
 24a:	95 95       	asr	r25
 24c:	87 95       	ror	r24
 24e:	95 95       	asr	r25
 250:	87 95       	ror	r24
 252:	95 95       	asr	r25
 254:	87 95       	ror	r24
 256:	95 95       	asr	r25
 258:	87 95       	ror	r24
 25a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <FRO_FAN_PU_Sup>
	FRO_FAN_ACC_Sup		=	(PINE & 0b01000000)>>6;
 25e:	8c b1       	in	r24, 0x0c	; 12
 260:	80 74       	andi	r24, 0x40	; 64
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	08 2e       	mov	r0, r24
 266:	89 2f       	mov	r24, r25
 268:	00 0c       	add	r0, r0
 26a:	88 1f       	adc	r24, r24
 26c:	99 0b       	sbc	r25, r25
 26e:	00 0c       	add	r0, r0
 270:	88 1f       	adc	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <FRO_FAN_ACC_Sup>
	FRO_WP_Sup			=	(PINE & 0b10000000)>>7;
 278:	8c b1       	in	r24, 0x0c	; 12
 27a:	88 1f       	adc	r24, r24
 27c:	88 27       	eor	r24, r24
 27e:	88 1f       	adc	r24, r24
 280:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <FRO_WP_Sup>
	
//code that sends the pin states using CAN comes here? 
//  CANLIB FROM OLE?

 284:	08 95       	ret

00000286 <main>:
int main(void){
	//configs
	//while 1
	//can stuff?
	
	fuse_read_out();
 286:	91 df       	rcall	.-222    	; 0x1aa <fuse_read_out>
	port_config(); //   => this function messes up the Interrupts and makes it impossible do perform the ADC conversion , correction, the DDRF is the issue here
 288:	54 d0       	rcall	.+168    	; 0x332 <port_config>
	sys_timer_config();
 28a:	5c d0       	rcall	.+184    	; 0x344 <sys_timer_config>
 28c:	14 df       	rcall	.-472    	; 0xb6 <adc_config>
	adc_config();
 28e:	78 94       	sei
 290:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <waste_cpu_time>
		
		// this var is 8bytes
		// we reset it to zero after it filled
		// 4byte
		
		if (waste_cpu_time < 0x3E8){ //0xffffffff   0x3E8 = 1000
 294:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <waste_cpu_time+0x1>
 298:	d0 91 19 01 	lds	r29, 0x0119	; 0x800119 <waste_cpu_time+0x2>
 29c:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <waste_cpu_time+0x3>
 2a0:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <waste_cpu_time+0x4>
 2a4:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <waste_cpu_time+0x5>
 2a8:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <waste_cpu_time+0x6>
 2ac:	f0 90 1e 01 	lds	r15, 0x011E	; 0x80011e <waste_cpu_time+0x7>
 2b0:	20 2f       	mov	r18, r16
 2b2:	31 2f       	mov	r19, r17
 2b4:	4d 2f       	mov	r20, r29
 2b6:	5c 2f       	mov	r21, r28
 2b8:	6b 2f       	mov	r22, r27
 2ba:	7a 2f       	mov	r23, r26
 2bc:	8f 2f       	mov	r24, r31
 2be:	9f 2d       	mov	r25, r15
 2c0:	27 3e       	cpi	r18, 0xE7	; 231
 2c2:	e3 e0       	ldi	r30, 0x03	; 3
 2c4:	3e 07       	cpc	r19, r30
 2c6:	41 05       	cpc	r20, r1
 2c8:	51 05       	cpc	r21, r1
 2ca:	61 05       	cpc	r22, r1
 2cc:	71 05       	cpc	r23, r1
 2ce:	81 05       	cpc	r24, r1
 2d0:	91 05       	cpc	r25, r1
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <main+0x50>
 2d4:	98 f4       	brcc	.+38     	; 0x2fc <main+0x76>
 2d6:	a1 e0       	ldi	r26, 0x01	; 1
			
			waste_cpu_time++;
 2d8:	7c d0       	rcall	.+248    	; 0x3d2 <__adddi3_s8>
 2da:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <waste_cpu_time>
 2de:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <waste_cpu_time+0x1>
 2e2:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <waste_cpu_time+0x2>
 2e6:	50 93 1a 01 	sts	0x011A, r21	; 0x80011a <waste_cpu_time+0x3>
 2ea:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <waste_cpu_time+0x4>
 2ee:	70 93 1c 01 	sts	0x011C, r23	; 0x80011c <waste_cpu_time+0x5>
 2f2:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <waste_cpu_time+0x6>
 2f6:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <waste_cpu_time+0x7>
 2fa:	ca cf       	rjmp	.-108    	; 0x290 <main+0xa>
 2fc:	e7 de       	rcall	.-562    	; 0xcc <adc_start_conversion>
			
			
		}
		else{
			adc_start_conversion();
 2fe:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <loops_completed>
			loops_completed ++;
 302:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <loops_completed+0x1>
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <loops_completed+0x1>
 30c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <loops_completed>
 310:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <waste_cpu_time>
			waste_cpu_time = 0;
 314:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <waste_cpu_time+0x1>
 318:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <waste_cpu_time+0x2>
 31c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <waste_cpu_time+0x3>
 320:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <waste_cpu_time+0x4>
 324:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <waste_cpu_time+0x5>
 328:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <waste_cpu_time+0x6>
 32c:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <waste_cpu_time+0x7>
 330:	af cf       	rjmp	.-162    	; 0x290 <main+0xa>

00000332 <port_config>:
 332:	11 b8       	out	0x01, r1	; 1
 334:	8f e1       	ldi	r24, 0x1F	; 31
	TIMSK0 |= (1<<OCF0A);  //interrupt flags possible
	OCR0A = 200; // what timer do we need, btw the compiler doesnt like anything bigger than 300 for some reason (reason is the 2^8 bits = 256)
}

void sys_tick_heart(){
	PORTB ^= PB4; //toggle the Heart led on Pin 4, will be controlled by the super loop in main.c
 336:	84 b9       	out	0x04, r24	; 4
 338:	17 b8       	out	0x07, r1	; 7
 33a:	8c e6       	ldi	r24, 0x6C	; 108
 33c:	8a b9       	out	0x0a, r24	; 10
 33e:	1d b8       	out	0x0d, r1	; 13
 340:	10 ba       	out	0x10, r1	; 16
 342:	08 95       	ret

00000344 <sys_timer_config>:
 344:	84 b5       	in	r24, 0x24	; 36
 346:	88 60       	ori	r24, 0x08	; 8
 348:	84 bd       	out	0x24, r24	; 36
 34a:	84 b5       	in	r24, 0x24	; 36
 34c:	83 60       	ori	r24, 0x03	; 3
 34e:	84 bd       	out	0x24, r24	; 36
 350:	ee e6       	ldi	r30, 0x6E	; 110
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	82 60       	ori	r24, 0x02	; 2
 358:	80 83       	st	Z, r24
 35a:	88 ec       	ldi	r24, 0xC8	; 200
 35c:	87 bd       	out	0x27, r24	; 39
 35e:	08 95       	ret

00000360 <__vector_16>:
	
};

ISR(TIMER0_COMP_vect){
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
 36e:	af 93       	push	r26
 370:	bf 93       	push	r27
	sys_time++;  //system time incremented on each interrupt flag from the CTC compare register => every OCR0A
 372:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sys_time>
 376:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <sys_time+0x1>
 37a:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <sys_time+0x2>
 37e:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <sys_time+0x3>
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	a1 1d       	adc	r26, r1
 386:	b1 1d       	adc	r27, r1
 388:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sys_time>
 38c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <sys_time+0x1>
 390:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <sys_time+0x2>
 394:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <sys_time+0x3>
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <__udivmodhi4>:
 3aa:	aa 1b       	sub	r26, r26
 3ac:	bb 1b       	sub	r27, r27
 3ae:	51 e1       	ldi	r21, 0x11	; 17
 3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <__udivmodhi4_ep>

000003b2 <__udivmodhi4_loop>:
 3b2:	aa 1f       	adc	r26, r26
 3b4:	bb 1f       	adc	r27, r27
 3b6:	a6 17       	cp	r26, r22
 3b8:	b7 07       	cpc	r27, r23
 3ba:	10 f0       	brcs	.+4      	; 0x3c0 <__udivmodhi4_ep>
 3bc:	a6 1b       	sub	r26, r22
 3be:	b7 0b       	sbc	r27, r23

000003c0 <__udivmodhi4_ep>:
 3c0:	88 1f       	adc	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	5a 95       	dec	r21
 3c6:	a9 f7       	brne	.-22     	; 0x3b2 <__udivmodhi4_loop>
 3c8:	80 95       	com	r24
 3ca:	90 95       	com	r25
 3cc:	bc 01       	movw	r22, r24
 3ce:	cd 01       	movw	r24, r26
 3d0:	08 95       	ret

000003d2 <__adddi3_s8>:
 3d2:	00 24       	eor	r0, r0
 3d4:	a7 fd       	sbrc	r26, 7
 3d6:	00 94       	com	r0
 3d8:	2a 0f       	add	r18, r26
 3da:	30 1d       	adc	r19, r0
 3dc:	40 1d       	adc	r20, r0
 3de:	50 1d       	adc	r21, r0
 3e0:	60 1d       	adc	r22, r0
 3e2:	70 1d       	adc	r23, r0
 3e4:	80 1d       	adc	r24, r0
 3e6:	90 1d       	adc	r25, r0
 3e8:	08 95       	ret

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
