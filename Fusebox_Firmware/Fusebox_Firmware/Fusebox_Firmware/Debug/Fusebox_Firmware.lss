
Fusebox_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000934  000009c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  0080011e  0080011e  000009e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001735  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f44  00000000  00000000  00002305  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d41  00000000  00000000  00003249  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00003f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092d  00000000  00000000  0000429c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057d  00000000  00000000  00004bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005146  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	05 c4       	rjmp	.+2058   	; 0x830 <__vector_9>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	c9 c1       	rjmp	.+914    	; 0x3c4 <__vector_12>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	be c3       	rjmp	.+1916   	; 0x7be <__vector_16>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	44 c0       	rjmp	.+136    	; 0xee <__vector_25>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e4 e3       	ldi	r30, 0x34	; 52
  a8:	f9 e0       	ldi	r31, 0x09	; 9
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ae 31       	cpi	r26, 0x1E	; 30
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	ae e1       	ldi	r26, 0x1E	; 30
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a9 34       	cpi	r26, 0x49	; 73
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	72 d2       	rcall	.+1252   	; 0x5b0 <main>
  cc:	31 c4       	rjmp	.+2146   	; 0x930 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_config>:
uint8_t adc_next = 0;



void adc_config(){
	ADMUX = (1<<REFS0); // AREF = AVcc and PF0 (ADC0) as input defined
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0) | (1<<ADIE);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8c e8       	ldi	r24, 0x8C	; 140
  dc:	80 83       	st	Z, r24
	// ADEN enables ADC
	// ADIE enables ADC interrupt
	// ADPS (Prescaler) 16
	// see datasheet page 290
	ADCSRA |= (1<<ADSC); //start first conversion
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <adc_start_conversion>:
}

void adc_start_conversion(){
	//start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADSC);
  e6:	88 ec       	ldi	r24, 0xC8	; 200
  e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ec:	08 95       	ret

000000ee <__vector_25>:
}

ISR(ADC_vect){
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	0b b6       	in	r0, 0x3b	; 59
  fa:	0f 92       	push	r0
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	//cli();
	// store ADC result
	adc_values[adc_next] = ADC;// ADCL | (ADCH << 8); //low bit erst ablesen
 114:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 118:	e8 2f       	mov	r30, r24
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 120:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	eb 5b       	subi	r30, 0xBB	; 187
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	31 83       	std	Z+1, r19	; 0x01
 12e:	20 83       	st	Z, r18
	adc_next++;
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	//adc_values[0] = (ADC*5)/1023;  //cant decide where in the code this should go without testing
	//adc_values[1] = ((ADC*5)/1023)+((10000*(ADC*5)/1023)/2500); //no way this is efficient, needs to be optimized later
	// reset index var
	//sei();
	if(adc_next == ADCVALUES){
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	11 f4       	brne	.+4      	; 0x13e <__vector_25+0x50>
		adc_next = 0;
 13a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 13e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 142:	80 64       	ori	r24, 0x40	; 64
 144:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	adc_start_conversion();
 148:	ce df       	rcall	.-100    	; 0xe6 <adc_start_conversion>
	
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0b be       	out	0x3b, r0	; 59
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <adc_get>:

// getter for each adc var
uint16_t adc_get(uint8_t adc){
	
	return adc_values[adc];
 170:	e8 2f       	mov	r30, r24
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	eb 5b       	subi	r30, 0xBB	; 187
 17a:	fe 4f       	sbci	r31, 0xFE	; 254
}
 17c:	80 81       	ld	r24, Z
 17e:	91 81       	ldd	r25, Z+1	; 0x01
 180:	08 95       	ret

00000182 <can_check_free>:

uint8_t can_check_free(uint8_t mobnum){
	
	uint8_t mob_status = 0;
	
	if(mobnum >7){
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	78 f0       	brcs	.+30     	; 0x1a4 <can_check_free+0x22>
		
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
 186:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 97       	sbiw	r24, 0x08	; 8
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <can_check_free+0x14>
 192:	35 95       	asr	r19
 194:	27 95       	ror	r18
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <can_check_free+0x10>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	20 ff       	sbrs	r18, 0
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <can_check_free+0x38>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	08 95       	ret


		} else {
		
		mob_status = !((CANEN2 >> mobnum) &1);
 1a4:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <can_check_free+0x2e>
 1ac:	35 95       	asr	r19
 1ae:	27 95       	ror	r18
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <can_check_free+0x2a>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	20 fd       	sbrc	r18, 0
 1b8:	80 e0       	ldi	r24, 0x00	; 0
	}

	return mob_status;
	
}
 1ba:	08 95       	ret

000001bc <can_cfg>:
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
 1bc:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	29 c0       	rjmp	.+82     	; 0x216 <can_cfg+0x5a>
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	48 9f       	mul	r20, r24
 1c8:	90 01       	movw	r18, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	82 2f       	mov	r24, r18
 1ce:	88 60       	ori	r24, 0x08	; 8
 1d0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANSTMOB = 0;
 1d4:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0;
 1d8:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANIDT4 = 0;
 1dc:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDT3 = 0;
 1e0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT2 = 0;
 1e4:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = 0;
 1e8:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDM4 = 0;
 1ec:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANIDM3 = 0;
 1f0:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM2 = 0;
 1f4:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM1 = 0;
 1f8:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		for (uint8_t byte = 0; byte < 8; byte++){
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <can_cfg+0x54>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
 200:	98 2f       	mov	r25, r24
 202:	92 2b       	or	r25, r18
 204:	98 60       	ori	r25, 0x08	; 8
 206:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			CANMSG = 0;
 20a:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	88 30       	cpi	r24, 0x08	; 8
 212:	b0 f3       	brcs	.-20     	; 0x200 <can_cfg+0x44>
}
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
 214:	4f 5f       	subi	r20, 0xFF	; 255
 216:	4f 30       	cpi	r20, 0x0F	; 15
 218:	a8 f2       	brcs	.-86     	; 0x1c4 <can_cfg+0x8>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x00;// Set Baudrate
 21a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;// 500kBaud according
 21e:	8c e0       	ldi	r24, 0x0C	; 12
 220:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x36;// to Datasheet S. 267
 224:	86 e3       	ldi	r24, 0x36	; 54
 226:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANGIE = 0;
 22a:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	CANGCON |= (1<<ENASTB); // Enable CAN
 22e:	e8 ed       	ldi	r30, 0xD8	; 216
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	82 60       	ori	r24, 0x02	; 2
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <can_rx>:
	
	
	
}
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
 244:	8b 01       	movw	r16, r22
	
	CANPAGE = to_receive->mob_number << MOBNB0;
 246:	8c 81       	ldd	r24, Y+4	; 0x04
 248:	82 95       	swap	r24
 24a:	80 7f       	andi	r24, 0xF0	; 240
 24c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_receive->mob_number)){
 250:	8c 81       	ldd	r24, Y+4	; 0x04
 252:	97 df       	rcall	.-210    	; 0x182 <can_check_free>
 254:	88 23       	and	r24, r24
 256:	71 f1       	breq	.+92     	; 0x2b4 <can_rx+0x7a>
		/* load the id 11 bit */
		CANIDT1 = to_receive->mob_id >>3;
 258:	88 81       	ld	r24, Y
 25a:	99 81       	ldd	r25, Y+1	; 0x01
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_receive->mob_id << 5)&0b11100000;
 26c:	88 81       	ld	r24, Y
 26e:	82 95       	swap	r24
 270:	88 0f       	add	r24, r24
 272:	80 7e       	andi	r24, 0xE0	; 224
 274:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 278:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 1<<RTRTAG;
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = to_receive->mob_idmask >>3;
 282:	8a 81       	ldd	r24, Y+2	; 0x02
 284:	9b 81       	ldd	r25, Y+3	; 0x03
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	96 95       	lsr	r25
 290:	87 95       	ror	r24
 292:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = (to_receive->mob_idmask <<5)&0b11100000;
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	82 95       	swap	r24
 29a:	88 0f       	add	r24, r24
 29c:	80 7e       	andi	r24, 0xE0	; 224
 29e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 2a2:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 2a6:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
 2aa:	88 ec       	ldi	r24, 0xC8	; 200
 2ac:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 2b0:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANGCON |= (1<<ENASTB); // Enable CAN
	
	
	
}
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	10 c0       	rjmp	.+32     	; 0x2d8 <can_rx+0x9e>
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
 2b8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ba:	30 e1       	ldi	r19, 0x10	; 16
 2bc:	83 9f       	mul	r24, r19
 2be:	c0 01       	movw	r24, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	82 2b       	or	r24, r18
 2c4:	88 60       	ori	r24, 0x08	; 8
 2c6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		data[byte] = CANMSG;
 2ca:	f8 01       	movw	r30, r16
 2cc:	e2 0f       	add	r30, r18
 2ce:	f1 1d       	adc	r31, r1
 2d0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 2d4:	80 83       	st	Z, r24
		CANIDM4 = 0;
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
 2d6:	2f 5f       	subi	r18, 0xFF	; 255
 2d8:	28 30       	cpi	r18, 0x08	; 8
 2da:	70 f3       	brcs	.-36     	; 0x2b8 <can_rx+0x7e>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	ec 01       	movw	r28, r24
	
	for(uint8_t byte = 0; byte <8; byte++){
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	10 c0       	rjmp	.+32     	; 0x310 <can_tx+0x2a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
 2f0:	8c 81       	ldd	r24, Y+4	; 0x04
 2f2:	30 e1       	ldi	r19, 0x10	; 16
 2f4:	83 9f       	mul	r24, r19
 2f6:	c0 01       	movw	r24, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	82 2b       	or	r24, r18
 2fc:	88 60       	ori	r24, 0x08	; 8
 2fe:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANMSG = data[byte];
 302:	fb 01       	movw	r30, r22
 304:	e2 0f       	add	r30, r18
 306:	f1 1d       	adc	r31, r1
 308:	80 81       	ld	r24, Z
 30a:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
 30e:	2f 5f       	subi	r18, 0xFF	; 255
 310:	28 30       	cpi	r18, 0x08	; 8
 312:	70 f3       	brcs	.-36     	; 0x2f0 <can_tx+0xa>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
 314:	8c 81       	ldd	r24, Y+4	; 0x04
 316:	82 95       	swap	r24
 318:	80 7f       	andi	r24, 0xF0	; 240
 31a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_send->mob_number)){
 31e:	8c 81       	ldd	r24, Y+4	; 0x04
 320:	30 df       	rcall	.-416    	; 0x182 <can_check_free>
 322:	88 23       	and	r24, r24
 324:	21 f1       	breq	.+72     	; 0x36e <can_tx+0x88>
		CANSTMOB = 0;
 326:	ee ee       	ldi	r30, 0xEE	; 238
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
 32c:	88 81       	ld	r24, Y
 32e:	99 81       	ldd	r25, Y+1	; 0x01
 330:	96 95       	lsr	r25
 332:	87 95       	ror	r24
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	96 95       	lsr	r25
 33a:	87 95       	ror	r24
 33c:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
 340:	88 81       	ld	r24, Y
 342:	82 95       	swap	r24
 344:	88 0f       	add	r24, r24
 346:	80 7e       	andi	r24, 0xE0	; 224
 348:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 34c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
 350:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0; //0b11111111;
 354:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0; //0b11100000;
 358:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 35c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 360:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANSTMOB = 0;
 364:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
 366:	88 e4       	ldi	r24, 0x48	; 72
 368:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 36c:	10 82       	st	Z, r1
	}
	
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <fan_power_unit_PWM_control>:
#include "fan_power_unit_PWM_control.h"

volatile uint8_t fan_duty = 1;

void fan_power_unit_PWM_control(uint8_t temperature, uint8_t fan_rpm){
	if (temperature > TEMP_MAX)
 374:	85 36       	cpi	r24, 0x65	; 101
 376:	08 f0       	brcs	.+2      	; 0x37a <fan_power_unit_PWM_control+0x6>
	{
		temperature = TEMP_MAX;
 378:	84 e6       	ldi	r24, 0x64	; 100
	}
	if (temperature >= TEMP_MIN)
 37a:	85 30       	cpi	r24, 0x05	; 5
 37c:	48 f0       	brcs	.+18     	; 0x390 <fan_power_unit_PWM_control+0x1c>
	{
		fan_duty = (temperature*63)/100;
 37e:	2f e3       	ldi	r18, 0x3F	; 63
 380:	82 9f       	mul	r24, r18
 382:	c0 01       	movw	r24, r0
 384:	11 24       	eor	r1, r1
 386:	64 e6       	ldi	r22, 0x64	; 100
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	ab d2       	rcall	.+1366   	; 0x8e2 <__divmodhi4>
 38c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 390:	08 95       	ret

00000392 <timer1_config>:
	}
	
}

void timer1_config(){	
	DDRB |= (1<<PB6);
 392:	84 b1       	in	r24, 0x04	; 4
 394:	80 64       	ori	r24, 0x40	; 64
 396:	84 b9       	out	0x04, r24	; 4
	//PORTB |= (1<<PB6);							//using mode 15 right now
TCCR1A = (1<<WGM11) | (1<<WGM10)	  // ?can use mode 14 with static frequency, variable duty cycle when OCR1A is incremented
 398:	83 e6       	ldi	r24, 0x63	; 99
 39a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		| (0<<COM1A1) | (1<<COM1A0) | (1<<COM1B1);// | (1<<CS11);  //NO PRESCALER HERE!!!! pre goes to the B counter
TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11);// | (1<<CS10);  //mode 14, need to set prescaler to 1, otherwise timer goes inactive and nothing happens
 39e:	8a e1       	ldi	r24, 0x1A	; 26
 3a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		
TIMSK1 = (1<<OCIE1A);		//interrupts on?
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
//ICR1 = 250;   //       16000000/(8*(1+64)) = 30769.23077 Hz   //with TOP value 62+1 the resolution is 6 bit
OCR1A = 63; 
 3aa:	8f e3       	ldi	r24, 0x3F	; 63
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
OCR1B = 24;	//50% duty?, changing this does nothing to the blinky so far
 3b6:	88 e1       	ldi	r24, 0x18	; 24
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 3be:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 3c2:	08 95       	ret

000003c4 <__vector_12>:
// WGM1[1:0]	= 11;
// COM1[1:0]	= 11;
// CS1[2:0]`	= 010;
}

ISR(TIMER1_COMPA_vect){
 3c4:	1f 92       	push	r1
 3c6:	0f 92       	push	r0
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	0f 92       	push	r0
 3cc:	11 24       	eor	r1, r1
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
//PORTB ^= (1<<PB3);
OCR1B = fan_duty;
 3d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 3dc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>


 3e0:	9f 91       	pop	r25
 3e2:	8f 91       	pop	r24
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <fuse_read_out>:
uint8_t	FRO_WP_Sup		=	0;

//uint16_t Fuse_States = 0;


uint16_t fuse_read_out(){
 3ee:	af 92       	push	r10
 3f0:	bf 92       	push	r11
 3f2:	cf 92       	push	r12
 3f4:	df 92       	push	r13
 3f6:	ef 92       	push	r14
 3f8:	ff 92       	push	r15
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
	//shifting bits so  that an input in the register is always gonna be read as 1 (1 means a Fuse is in, 0 means a fuse is out), otherwise a Fuse 0b00000010 is a decimal 2
																												// with the  shit operation 0b00000010>>1 is a decimal 1 (0b00000001)
	FRO_Aim_EVO			=	(PINA & 0b00000001); //no need to shift 
 402:	80 b1       	in	r24, 0x00	; 0
 404:	81 70       	andi	r24, 0x01	; 1
 406:	b8 2e       	mov	r11, r24
 408:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <FRO_Aim_EVO>
	FRO_Shutdown		=	(PINA & 0b00000010)>>1;  //FRO_Shutdown at PA1, 1st bit of that register, therefore we shift the 1st bit to the 0th bit
 40c:	80 b1       	in	r24, 0x00	; 0
 40e:	82 70       	andi	r24, 0x02	; 2
 410:	c8 2e       	mov	r12, r24
 412:	d1 2c       	mov	r13, r1
 414:	d5 94       	asr	r13
 416:	c7 94       	ror	r12
 418:	c0 92 29 01 	sts	0x0129, r12	; 0x800129 <FRO_Shutdown>
	FRO_Brakelight		=	(PINA & 0b00000100)>>2;  //alternative way of writing this is PINA & (1<<PB2), meaning it reads out the state of the register at the bit of PIN 2 (2nd bit) (the bit still is not shifted in this form => (PINA & (1<<PB2))>>2)
 41c:	80 b1       	in	r24, 0x00	; 0
 41e:	84 70       	andi	r24, 0x04	; 4
 420:	e8 2e       	mov	r14, r24
 422:	f1 2c       	mov	r15, r1
 424:	f5 94       	asr	r15
 426:	e7 94       	ror	r14
 428:	f5 94       	asr	r15
 42a:	e7 94       	ror	r14
 42c:	e0 92 28 01 	sts	0x0128, r14	; 0x800128 <FRO_Brakelight>
	FRO_24V				=	(PINA & 0b00001000)>>3;
 430:	00 b1       	in	r16, 0x00	; 0
 432:	08 70       	andi	r16, 0x08	; 8
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	15 95       	asr	r17
 438:	07 95       	ror	r16
 43a:	15 95       	asr	r17
 43c:	07 95       	ror	r16
 43e:	15 95       	asr	r17
 440:	07 95       	ror	r16
 442:	00 93 27 01 	sts	0x0127, r16	; 0x800127 <FRO_24V>
	
	FRO_HV_Distri		=	(PINE & 0b00000001);
 446:	8c b1       	in	r24, 0x0c	; 12
 448:	81 70       	andi	r24, 0x01	; 1
 44a:	a8 2e       	mov	r10, r24
 44c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <FRO_HV_Distri>
	FRO_TSAL			=	(PINE & 0b00000010)>>1;
 450:	cc b1       	in	r28, 0x0c	; 12
 452:	c2 70       	andi	r28, 0x02	; 2
 454:	d0 e0       	ldi	r29, 0x00	; 0
 456:	d5 95       	asr	r29
 458:	c7 95       	ror	r28
 45a:	c0 93 25 01 	sts	0x0125, r28	; 0x800125 <FRO_TSAL>
	FRO_TSAC			=	(PINE & 0b00000100)>>2;
 45e:	ac b1       	in	r26, 0x0c	; 12
 460:	a4 70       	andi	r26, 0x04	; 4
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	b5 95       	asr	r27
 466:	a7 95       	ror	r26
 468:	b5 95       	asr	r27
 46a:	a7 95       	ror	r26
 46c:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <FRO_TSAC>
	FRO_INV0			=	(PINE & 0b00001000)>>3;
 470:	ec b1       	in	r30, 0x0c	; 12
 472:	e8 70       	andi	r30, 0x08	; 8
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	f5 95       	asr	r31
 478:	e7 95       	ror	r30
 47a:	f5 95       	asr	r31
 47c:	e7 95       	ror	r30
 47e:	f5 95       	asr	r31
 480:	e7 95       	ror	r30
 482:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <FRO_INV0>
	FRO_INV1			=	(PINE & 0b00010000)>>4;
 486:	6c b1       	in	r22, 0x0c	; 12
 488:	60 71       	andi	r22, 0x10	; 16
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	75 95       	asr	r23
 48e:	67 95       	ror	r22
 490:	75 95       	asr	r23
 492:	67 95       	ror	r22
 494:	75 95       	asr	r23
 496:	67 95       	ror	r22
 498:	75 95       	asr	r23
 49a:	67 95       	ror	r22
 49c:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <FRO_INV1>
	FRO_FAN_PU_Sup		=	(PINE & 0b00100000)>>5;
 4a0:	4c b1       	in	r20, 0x0c	; 12
 4a2:	40 72       	andi	r20, 0x20	; 32
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	55 95       	asr	r21
 4a8:	47 95       	ror	r20
 4aa:	55 95       	asr	r21
 4ac:	47 95       	ror	r20
 4ae:	55 95       	asr	r21
 4b0:	47 95       	ror	r20
 4b2:	55 95       	asr	r21
 4b4:	47 95       	ror	r20
 4b6:	55 95       	asr	r21
 4b8:	47 95       	ror	r20
 4ba:	40 93 21 01 	sts	0x0121, r20	; 0x800121 <FRO_FAN_PU_Sup>
	FRO_FAN_ACC_Sup		=	(PINE & 0b01000000)>>6;
 4be:	2c b1       	in	r18, 0x0c	; 12
 4c0:	20 74       	andi	r18, 0x40	; 64
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	02 2e       	mov	r0, r18
 4c6:	23 2f       	mov	r18, r19
 4c8:	00 0c       	add	r0, r0
 4ca:	22 1f       	adc	r18, r18
 4cc:	33 0b       	sbc	r19, r19
 4ce:	00 0c       	add	r0, r0
 4d0:	22 1f       	adc	r18, r18
 4d2:	33 1f       	adc	r19, r19
 4d4:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <FRO_FAN_ACC_Sup>
	FRO_WP_Sup			=	(PINE & 0b10000000)>>7;
 4d8:	fc b1       	in	r31, 0x0c	; 12
 4da:	ff 1f       	adc	r31, r31
 4dc:	ff 27       	eor	r31, r31
 4de:	ff 1f       	adc	r31, r31
 4e0:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <FRO_WP_Sup>
	
//code that sends the pin states using CAN comes here? just throw all the data into an Integer that will later be sent using CAN
uint16_t Fuse_States = 0;

 /* set bits of this integer to correspond with our 11 fuses*/
Fuse_States |= (FRO_Aim_EVO) | (FRO_Shutdown<<1) | (FRO_Brakelight<<2/*>>0b0000000000000010*/) | (FRO_24V<<3) | (FRO_HV_Distri<<4) | (FRO_TSAL<<5) | (FRO_TSAC<<6) | (FRO_INV0<<7) | (FRO_INV1<<8) | (FRO_FAN_PU_Sup<<9) | (FRO_FAN_ACC_Sup<<10) | (FRO_WP_Sup<<11);
 4e4:	8c 2d       	mov	r24, r12
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	8b 29       	or	r24, r11
 4ee:	f1 2c       	mov	r15, r1
 4f0:	ee 0c       	add	r14, r14
 4f2:	ff 1c       	adc	r15, r15
 4f4:	ee 0c       	add	r14, r14
 4f6:	ff 1c       	adc	r15, r15
 4f8:	8e 29       	or	r24, r14
 4fa:	9f 29       	or	r25, r15
 4fc:	10 e0       	ldi	r17, 0x00	; 0
 4fe:	00 0f       	add	r16, r16
 500:	11 1f       	adc	r17, r17
 502:	00 0f       	add	r16, r16
 504:	11 1f       	adc	r17, r17
 506:	00 0f       	add	r16, r16
 508:	11 1f       	adc	r17, r17
 50a:	80 2b       	or	r24, r16
 50c:	91 2b       	or	r25, r17
 50e:	b1 2c       	mov	r11, r1
 510:	aa 0c       	add	r10, r10
 512:	bb 1c       	adc	r11, r11
 514:	aa 0c       	add	r10, r10
 516:	bb 1c       	adc	r11, r11
 518:	aa 0c       	add	r10, r10
 51a:	bb 1c       	adc	r11, r11
 51c:	aa 0c       	add	r10, r10
 51e:	bb 1c       	adc	r11, r11
 520:	8a 29       	or	r24, r10
 522:	9b 29       	or	r25, r11
 524:	d0 e0       	ldi	r29, 0x00	; 0
 526:	cc 0f       	add	r28, r28
 528:	dd 1f       	adc	r29, r29
 52a:	c2 95       	swap	r28
 52c:	d2 95       	swap	r29
 52e:	d0 7f       	andi	r29, 0xF0	; 240
 530:	dc 27       	eor	r29, r28
 532:	c0 7f       	andi	r28, 0xF0	; 240
 534:	dc 27       	eor	r29, r28
 536:	8c 2b       	or	r24, r28
 538:	9d 2b       	or	r25, r29
 53a:	b0 e0       	ldi	r27, 0x00	; 0
 53c:	00 24       	eor	r0, r0
 53e:	b6 95       	lsr	r27
 540:	a7 95       	ror	r26
 542:	07 94       	ror	r0
 544:	b6 95       	lsr	r27
 546:	a7 95       	ror	r26
 548:	07 94       	ror	r0
 54a:	ba 2f       	mov	r27, r26
 54c:	a0 2d       	mov	r26, r0
 54e:	8a 2b       	or	r24, r26
 550:	9b 2b       	or	r25, r27
 552:	ee 2e       	mov	r14, r30
 554:	f1 2c       	mov	r15, r1
 556:	f6 94       	lsr	r15
 558:	fe 2c       	mov	r15, r14
 55a:	ee 24       	eor	r14, r14
 55c:	f7 94       	ror	r15
 55e:	e7 94       	ror	r14
 560:	8e 29       	or	r24, r14
 562:	9f 29       	or	r25, r15
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	76 2f       	mov	r23, r22
 568:	66 27       	eor	r22, r22
 56a:	86 2b       	or	r24, r22
 56c:	97 2b       	or	r25, r23
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	54 2f       	mov	r21, r20
 572:	44 27       	eor	r20, r20
 574:	55 0f       	add	r21, r21
 576:	84 2b       	or	r24, r20
 578:	95 2b       	or	r25, r21
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	32 2f       	mov	r19, r18
 57e:	22 27       	eor	r18, r18
 580:	33 0f       	add	r19, r19
 582:	33 0f       	add	r19, r19
 584:	28 2b       	or	r18, r24
 586:	39 2b       	or	r19, r25
 588:	8f 2f       	mov	r24, r31
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	98 2f       	mov	r25, r24
 58e:	88 27       	eor	r24, r24
 590:	99 0f       	add	r25, r25
 592:	99 0f       	add	r25, r25
 594:	99 0f       	add	r25, r25

/* all fuses being a logical 1 (fuse is IN) give us the following value : 0b0000011111111111 = 11d , because we shifted fuse bits in the read function, we can just 
assign those 1s to any bit within our 16 bit integer, just like we do with registers*/
return Fuse_States;

 596:	82 2b       	or	r24, r18
 598:	93 2b       	or	r25, r19
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	ff 90       	pop	r15
 5a4:	ef 90       	pop	r14
 5a6:	df 90       	pop	r13
 5a8:	cf 90       	pop	r12
 5aa:	bf 90       	pop	r11
 5ac:	af 90       	pop	r10
 5ae:	08 95       	ret

000005b0 <main>:

extern volatile uint8_t fan_duty;
uint8_t R2D_pressed = 0;
extern uint8_t FRO_TSAC;

int main(void){
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
 5b8:	6a 97       	sbiw	r28, 0x1a	; 26
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	f8 94       	cli
 5be:	de bf       	out	0x3e, r29	; 62
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	cd bf       	out	0x3d, r28	; 61
	
	//timer0_config(1000, CTC_Mode , 3, No_Mode );
	
	port_config();
 5c4:	d7 d0       	rcall	.+430    	; 0x774 <port_config>
	fuse_read_out();
 5c6:	13 df       	rcall	.-474    	; 0x3ee <fuse_read_out>
	can_cfg();
 5c8:	f9 dd       	rcall	.-1038   	; 0x1bc <can_cfg>
	adc_config();
 5ca:	82 dd       	rcall	.-1276   	; 0xd0 <adc_config>
	timer2_config();
 5cc:	25 d1       	rcall	.+586    	; 0x818 <timer2_config>
 5ce:	e4 d0       	rcall	.+456    	; 0x798 <sys_timer_config>
	sys_timer_config();
 5d0:	e0 de       	rcall	.-576    	; 0x392 <timer1_config>
 5d2:	1a 82       	std	Y+2, r1	; 0x02
	timer1_config();
 5d4:	19 82       	std	Y+1, r1	; 0x01
 5d6:	1c 82       	std	Y+4, r1	; 0x04
	
	


 	struct CAN_MOB can_FB_mob;//data to send  FB = fusebox, outgoing fusebox message with its 8 dataBYTES
	can_FB_mob.mob_id = 0;
 5d8:	1b 82       	std	Y+3, r1	; 0x03
 5da:	1d 82       	std	Y+5, r1	; 0x05
 	can_FB_mob.mob_idmask = 0;
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	91 e0       	ldi	r25, 0x01	; 1
	can_FB_mob.mob_number = 0;
 5e0:	9f 87       	std	Y+15, r25	; 0x0f
 	uint8_t FB_databytes[8];  

	
	struct CAN_MOB can_R2D_mob;
	can_R2D_mob.mob_id = 0b100000000;
 5e2:	8e 87       	std	Y+14, r24	; 0x0e
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	97 e0       	ldi	r25, 0x07	; 7
 5e8:	99 8b       	std	Y+17, r25	; 0x11
	can_R2D_mob.mob_idmask = 0b11111111111;
 5ea:	88 8b       	std	Y+16, r24	; 0x10
 5ec:	1a 8a       	std	Y+18, r1	; 0x12
 5ee:	78 94       	sei
 5f0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <sys_time>
	can_R2D_mob.mob_number = 0;
	uint8_t R2D_databytes[8];
	

	sei();
 5f4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <sys_time+0x1>
while (1){
 		
		
		

	if((sys_time - time_old) > 10){  //10ms
 5f8:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <sys_time+0x2>
 5fc:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <sys_time+0x3>
 600:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <time_old>
 604:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <time_old+0x1>
 608:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <time_old+0x2>
 60c:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <time_old+0x3>
 610:	8c 01       	movw	r16, r24
 612:	9d 01       	movw	r18, r26
 614:	04 1b       	sub	r16, r20
 616:	15 0b       	sbc	r17, r21
 618:	26 0b       	sbc	r18, r22
 61a:	37 0b       	sbc	r19, r23
 61c:	0b 30       	cpi	r16, 0x0B	; 11
 61e:	11 05       	cpc	r17, r1
 620:	21 05       	cpc	r18, r1
 622:	31 05       	cpc	r19, r1
 624:	08 f4       	brcc	.+2      	; 0x628 <main+0x78>
 626:	44 c0       	rjmp	.+136    	; 0x6b0 <main+0x100>
 628:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <time_old>
 62c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <time_old+0x1>
				time_old = sys_time; 
 630:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <time_old+0x2>
 634:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <time_old+0x3>
 638:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <time_old_100ms>
 63c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <time_old_100ms+0x1>
				time_old_100ms++;
 640:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <time_old_100ms+0x2>
 644:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <time_old_100ms+0x3>
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	a1 1d       	adc	r26, r1
 64c:	b1 1d       	adc	r27, r1
 64e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <time_old_100ms>
 652:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <time_old_100ms+0x1>
 656:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <time_old_100ms+0x2>
 65a:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <time_old_100ms+0x3>
 65e:	c7 de       	rcall	.-626    	; 0x3ee <fuse_read_out>
				//fuse_read_out(); // Fuse_States updates only once for some reason, taking out a fuse makes the fault go on
				//but putting it back in doesn't turn it off, need a loop within while(0)? need some way to make it update
				//its values with every 10 ms loop completed => a for loop in the FRO function to fill it out manually, array needed
				//SOLVED by deploying the function directly into the if statement and declaring Fuse_States locally in the function
				// a global declaration inside fuse_read_out_config.c prevented Fuse_States from being updated 
				if ((fuse_read_out() & 0b111111111111) == 0b111111111111){ //fuses in,   0b0000111111111111
 660:	9f 70       	andi	r25, 0x0F	; 15
 662:	8f 3f       	cpi	r24, 0xFF	; 255
 664:	9f 40       	sbci	r25, 0x0F	; 15
 666:	09 f4       	brne	.+2      	; 0x66a <main+0xba>
 668:	cf d0       	rcall	.+414    	; 0x808 <fault_not_detected>
					
					fault_not_detected();																									
 66a:	c1 de       	rcall	.-638    	; 0x3ee <fuse_read_out>
				}																															
	/*else*/	if((fuse_read_out() & 0b111111111111) < 0b111111111111){						//at least 1 fuse out for example 0000 1111 0111 1111
 66c:	9f 70       	andi	r25, 0x0F	; 15
 66e:	8f 3f       	cpi	r24, 0xFF	; 255
 670:	9f 40       	sbci	r25, 0x0F	; 15
 672:	08 f4       	brcc	.+2      	; 0x676 <main+0xc6>
					fault_detected();
 674:	cd d0       	rcall	.+410    	; 0x810 <fault_detected>
				
	//INFO		
//fuse_read_out()&0xff;			// input &0xff gives you the first byte (8bit) (least significant byte)
//(fuse_read_out()>>8)&0xff;		//shifting 1 byte to the right gives us the next 8 bit bundle, now we've read the full 16 bit value

 	FB_databytes[0]	= fuse_read_out()&0xff		;			//  lsb
 676:	bb de       	rcall	.-650    	; 0x3ee <fuse_read_out>
 678:	8e 83       	std	Y+6, r24	; 0x06
 67a:	b9 de       	rcall	.-654    	; 0x3ee <fuse_read_out>
 	FB_databytes[1]	= (fuse_read_out()>>8)&0xff	;			//  msb
 67c:	9f 83       	std	Y+7, r25	; 0x07
 67e:	03 d1       	rcall	.+518    	; 0x886 <SCI_read_out>
 680:	88 87       	std	Y+8, r24	; 0x08
 	FB_databytes[2]	= SCI_read_out()			;			// fits in 8 bits
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	75 dd       	rcall	.-1302   	; 0x170 <adc_get>
 	FB_databytes[3]	= adc_get(0)				;
 686:	89 87       	std	Y+9, r24	; 0x09
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	72 dd       	rcall	.-1308   	; 0x170 <adc_get>
 68c:	8a 87       	std	Y+10, r24	; 0x0a
	FB_databytes[4]	= adc_get(1)				;  
 68e:	1c 86       	std	Y+12, r1	; 0x0c
 690:	1d 86       	std	Y+13, r1	; 0x0d
 692:	be 01       	movw	r22, r28
 	FB_databytes[6]	= 0							;
 694:	6a 5f       	subi	r22, 0xFA	; 250
 	FB_databytes[7]	= 0							;


 	can_tx(&can_FB_mob, FB_databytes);  //& is a reference operator 
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	ce 01       	movw	r24, r28
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	24 de       	rcall	.-952    	; 0x2e6 <can_tx>
 69e:	be 01       	movw	r22, r28
 6a0:	6d 5e       	subi	r22, 0xED	; 237
 6a2:	7f 4f       	sbci	r23, 0xFF	; 255
	
	can_rx(&can_R2D_mob, R2D_databytes);
 6a4:	ce 01       	movw	r24, r28
 6a6:	0e 96       	adiw	r24, 0x0e	; 14
 6a8:	c8 dd       	rcall	.-1136   	; 0x23a <can_rx>
 6aa:	8d 89       	ldd	r24, Y+21	; 0x15
 6ac:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <R2D_pressed>
 6b0:	9e de       	rcall	.-708    	; 0x3ee <fuse_read_out>


	
	R2D_pressed = R2D_databytes[2];// | R2D_databytes[3];
 6b2:	9f 70       	andi	r25, 0x0F	; 15
 6b4:	8f 3f       	cpi	r24, 0xFF	; 255
 6b6:	9f 40       	sbci	r25, 0x0F	; 15
	
	
	//if ((time_old_20) > 20){ //20 ms timer for r2d checks?
	//	time_old_20 = 0;
		
		if ((fuse_read_out() & 0b111111111111) < 0b111111111111){  //debugging purposes fuse acts as my switch
 6b8:	08 f0       	brcs	.+2      	; 0x6bc <main+0x10c>
 6ba:	40 c0       	rjmp	.+128    	; 0x73c <main+0x18c>
 6bc:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <r2d_length>
 6c0:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <r2d_length+0x1>
 6c4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <r2d_length+0x2>
			r2d_length = 0;
 6c8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <r2d_length+0x3>
 6cc:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <r2d_length>
 6d0:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <r2d_length+0x1>
 6d4:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <r2d_length+0x2>
			
			if (r2d_length < 30){
 6d8:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <r2d_length+0x3>
 6dc:	4e 97       	sbiw	r24, 0x1e	; 30
 6de:	a1 05       	cpc	r26, r1
 6e0:	b1 05       	cpc	r27, r1
 6e2:	60 f5       	brcc	.+88     	; 0x73c <main+0x18c>
 6e4:	e0 eb       	ldi	r30, 0xB0	; 176
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	84 60       	ori	r24, 0x04	; 4
 6ec:	80 83       	st	Z, r24
				//buzzer_noise();
						
				TCCR2A |= (1<<CS22); // starts timer
 6ee:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <note_next>
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	ef 5f       	subi	r30, 0xFF	; 255
 6f6:	fe 4f       	sbci	r31, 0xFE	; 254
						
				OCR2A = song[note_next];
 6f8:	80 81       	ld	r24, Z
 6fa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 6fe:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <note_length>
 702:	8f 5f       	subi	r24, 0xFF	; 255
 704:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <note_length>
						
				note_length++;
 708:	82 30       	cpi	r24, 0x02	; 2
 70a:	39 f4       	brne	.+14     	; 0x71a <main+0x16a>
 70c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <note_length>
 710:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <note_next>
						
					if (note_length == 2){
 714:	8f 5f       	subi	r24, 0xFF	; 255
					note_length = 0;
 716:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <note_next>
					note_next++;
 71a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <note_next>
 71e:	8d 31       	cpi	r24, 0x1D	; 29
 720:	41 f4       	brne	.+16     	; 0x732 <main+0x182>
 722:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <note_next>
					}
						if (note_next == 29){
 726:	e0 eb       	ldi	r30, 0xB0	; 176
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
						note_next = 0;
 72c:	8b 7f       	andi	r24, 0xFB	; 251
 72e:	80 83       	st	Z, r24
						TCCR2A &= ~(1<<CS22);
 730:	05 c0       	rjmp	.+10     	; 0x73c <main+0x18c>
 732:	e0 eb       	ldi	r30, 0xB0	; 176
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	8b 7f       	andi	r24, 0xFB	; 251
 73a:	80 83       	st	Z, r24
						}		
							else{			//stops the buzzer timer
							TCCR2A &= ~(1<<CS22);
 73c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <time_old_100ms>
 740:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <time_old_100ms+0x1>
 744:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <time_old_100ms+0x2>
	
	
	
	
	
 	if (time_old_100ms >= 100){ //100 ms
 748:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <time_old_100ms+0x3>
 74c:	84 36       	cpi	r24, 0x64	; 100
 74e:	91 05       	cpc	r25, r1
 750:	a1 05       	cpc	r26, r1
 752:	b1 05       	cpc	r27, r1
 754:	08 f4       	brcc	.+2      	; 0x758 <main+0x1a8>
 756:	4c cf       	rjmp	.-360    	; 0x5f0 <main+0x40>
 758:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <time_old_100ms>
 75c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <time_old_100ms+0x1>
 	time_old_100ms = 0;
 760:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <time_old_100ms+0x2>
 764:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <time_old_100ms+0x3>
 768:	25 d0       	rcall	.+74     	; 0x7b4 <sys_tick_heart>
 76a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 		sys_tick_heart();
 76e:	82 e3       	ldi	r24, 0x32	; 50
 770:	01 de       	rcall	.-1022   	; 0x374 <fan_power_unit_PWM_control>
 		//for (x = 5; x < 90; x++)  //testing the range of values to alter the duty%
 		//{
 			int16_t CAN_temperature = x; //from can
 			uint8_t T = (uint8_t) CAN_temperature;
 			//_delay_ms(1);   //use sys timer later
 			fan_power_unit_PWM_control(T, fan_duty);
 772:	3e cf       	rjmp	.-388    	; 0x5f0 <main+0x40>

00000774 <port_config>:

volatile unsigned long sys_time = 0;


void port_config(){  //0 input, 1 output
	DDRA = 0;   //Fuse Read Out Inputs
 774:	11 b8       	out	0x01, r1	; 1
	
	DDRB &= ~(1<<PB1);
 776:	84 b1       	in	r24, 0x04	; 4
 778:	8d 7f       	andi	r24, 0xFD	; 253
 77a:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PB1);
 77c:	85 b1       	in	r24, 0x05	; 5
 77e:	82 60       	ori	r24, 0x02	; 2
 780:	85 b9       	out	0x05, r24	; 5
	MCUCR &= ~(1<<PUD);
 782:	85 b7       	in	r24, 0x35	; 53
 784:	8f 7e       	andi	r24, 0xEF	; 239
 786:	85 bf       	out	0x35, r24	; 53

	DDRB = 0 | (1<<PB0) |(1<<PB2) | (1<<PB3) | (1<<PB4) | (1<<PB5); //WP, fan and LED outputs
 788:	8d e3       	ldi	r24, 0x3D	; 61
 78a:	84 b9       	out	0x04, r24	; 4
	DDRC = 0; // Shutdown circuit just like FRO is an input (indicates the state of those pins for debugging purposes)
 78c:	17 b8       	out	0x07, r1	; 7
	DDRD = 0 | (1<<PD2) | (1<<PD3) | (1<<PD5) | (1<<PD6); // timer for the buzzer and can outputs
 78e:	8c e6       	ldi	r24, 0x6C	; 108
 790:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0; //Fuse Read Out Inputs
 792:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0;
 794:	10 ba       	out	0x10, r1	; 16
 796:	08 95       	ret

00000798 <sys_timer_config>:
}

void sys_timer_config(){   //all previous software uses a 1ms timer/counter =>CTC with OCR0A=250
	TCCR0A |= (1<<WGM01);
 798:	84 b5       	in	r24, 0x24	; 36
 79a:	88 60       	ori	r24, 0x08	; 8
 79c:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<CS01) | (1<<CS00);
 79e:	84 b5       	in	r24, 0x24	; 36
 7a0:	83 60       	ori	r24, 0x03	; 3
 7a2:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= (1<<OCF0A);  //interrupt flags possible
 7a4:	ee e6       	ldi	r30, 0x6E	; 110
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	80 81       	ld	r24, Z
 7aa:	82 60       	ori	r24, 0x02	; 2
 7ac:	80 83       	st	Z, r24
	OCR0A = 250; // what timer do we need, btw the compiler doesnt like anything bigger than 300 for some reason (reason is the 2^8 bits = 256)
 7ae:	8a ef       	ldi	r24, 0xFA	; 250
 7b0:	87 bd       	out	0x27, r24	; 39
 7b2:	08 95       	ret

000007b4 <sys_tick_heart>:
}

void sys_tick_heart(){
	PORTB ^= (1<<PB4); //toggle the Heart led on Pin 4, will be controlled by the super loop in main.c
 7b4:	95 b1       	in	r25, 0x05	; 5
 7b6:	80 e1       	ldi	r24, 0x10	; 16
 7b8:	89 27       	eor	r24, r25
 7ba:	85 b9       	out	0x05, r24	; 5
 7bc:	08 95       	ret

000007be <__vector_16>:
	
};

ISR(TIMER0_COMP_vect){
 7be:	1f 92       	push	r1
 7c0:	0f 92       	push	r0
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	0f 92       	push	r0
 7c6:	11 24       	eor	r1, r1
 7c8:	8f 93       	push	r24
 7ca:	9f 93       	push	r25
 7cc:	af 93       	push	r26
 7ce:	bf 93       	push	r27
	sys_time++;  //system time incremented on each interrupt flag from the CTC compare register => every OCR0A
 7d0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <sys_time>
 7d4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <sys_time+0x1>
 7d8:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <sys_time+0x2>
 7dc:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <sys_time+0x3>
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	a1 1d       	adc	r26, r1
 7e4:	b1 1d       	adc	r27, r1
 7e6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <sys_time>
 7ea:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <sys_time+0x1>
 7ee:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <sys_time+0x2>
 7f2:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <sys_time+0x3>
	
}
 7f6:	bf 91       	pop	r27
 7f8:	af 91       	pop	r26
 7fa:	9f 91       	pop	r25
 7fc:	8f 91       	pop	r24
 7fe:	0f 90       	pop	r0
 800:	0f be       	out	0x3f, r0	; 63
 802:	0f 90       	pop	r0
 804:	1f 90       	pop	r1
 806:	18 95       	reti

00000808 <fault_not_detected>:

void fault_not_detected(){
	
	PORTB &= ~(1<<PB3); //turn off red led in case of no fault
 808:	85 b1       	in	r24, 0x05	; 5
 80a:	87 7f       	andi	r24, 0xF7	; 247
 80c:	85 b9       	out	0x05, r24	; 5
 80e:	08 95       	ret

00000810 <fault_detected>:
}
void fault_detected(){
	
	PORTB |= (1<<PB3);
 810:	85 b1       	in	r24, 0x05	; 5
 812:	88 60       	ori	r24, 0x08	; 8
 814:	85 b9       	out	0x05, r24	; 5
 816:	08 95       	ret

00000818 <timer2_config>:
		if (note_length == 2){
			note_length = 0;
			note_next++;
		}
		if (note_next == 29){
			note_next = 0;
 818:	e0 eb       	ldi	r30, 0xB0	; 176
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	80 81       	ld	r24, Z
 81e:	88 60       	ori	r24, 0x08	; 8
 820:	80 83       	st	Z, r24
 822:	82 e0       	ldi	r24, 0x02	; 2
 824:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 828:	8a e2       	ldi	r24, 0x2A	; 42
 82a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 82e:	08 95       	ret

00000830 <__vector_9>:
// 		else{			//stops the buzzer  hold_r2d_timer() function?
// 			TCCR2A &= ~(1<<CS22);
// 		}
}

ISR(TIMER2_COMP_vect){ //isr fur timer2 
 830:	1f 92       	push	r1
 832:	0f 92       	push	r0
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	0f 92       	push	r0
 838:	11 24       	eor	r1, r1
 83a:	8f 93       	push	r24
 83c:	9f 93       	push	r25
 83e:	af 93       	push	r26
 840:	bf 93       	push	r27
	cli();
 842:	f8 94       	cli
	PORTD ^= (1<<PD2);
 844:	9b b1       	in	r25, 0x0b	; 11
 846:	84 e0       	ldi	r24, 0x04	; 4
 848:	89 27       	eor	r24, r25
 84a:	8b b9       	out	0x0b, r24	; 11
	r2d_length++;
 84c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <r2d_length>
 850:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <r2d_length+0x1>
 854:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <r2d_length+0x2>
 858:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <r2d_length+0x3>
 85c:	01 96       	adiw	r24, 0x01	; 1
 85e:	a1 1d       	adc	r26, r1
 860:	b1 1d       	adc	r27, r1
 862:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <r2d_length>
 866:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <r2d_length+0x1>
 86a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <r2d_length+0x2>
 86e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <r2d_length+0x3>
	sei();
 872:	78 94       	sei
		if (note_next == 4)
	{
		note_next = 0;
	}
	*/
 874:	bf 91       	pop	r27
 876:	af 91       	pop	r26
 878:	9f 91       	pop	r25
 87a:	8f 91       	pop	r24
 87c:	0f 90       	pop	r0
 87e:	0f be       	out	0x3f, r0	; 63
 880:	0f 90       	pop	r0
 882:	1f 90       	pop	r1
 884:	18 95       	reti

00000886 <SCI_read_out>:
 uint8_t	SCI_HV_Distri_5V	=	0;
 uint8_t	SCI_SDB_Right_5V	=	0;
 uint8_t	SCI_INV1_5V			=	0;
 
uint8_t /* no need for 16*/ SCI_read_out(){
	SCI_TSMS_5V			=	(PINA & 00000001);
 886:	20 b1       	in	r18, 0x00	; 0
 888:	62 2f       	mov	r22, r18
 88a:	61 70       	andi	r22, 0x01	; 1
 88c:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <SCI_TSMS_5V>
	SCI_INV0_5V			=	(PINA & 00000010)>>1;
 890:	90 b1       	in	r25, 0x00	; 0
 892:	98 70       	andi	r25, 0x08	; 8
 894:	29 2f       	mov	r18, r25
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	35 95       	asr	r19
 89a:	27 95       	ror	r18
 89c:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <SCI_INV0_5V>
	SCI_TSAC_5V			=	(PINA & 00000100)>>2;
 8a0:	40 b1       	in	r20, 0x00	; 0
 8a2:	40 74       	andi	r20, 0x40	; 64
 8a4:	50 e0       	ldi	r21, 0x00	; 0
 8a6:	55 95       	asr	r21
 8a8:	47 95       	ror	r20
 8aa:	55 95       	asr	r21
 8ac:	47 95       	ror	r20
 8ae:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <SCI_TSAC_5V>
	SCI_SDB_Left_5V		=	(PINA & 00001000)>>3;
 8b2:	80 b1       	in	r24, 0x00	; 0
 8b4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <SCI_SDB_Left_5V>
	SCI_HV_Distri_5V	=	(PINA & 00010000)>>4;
 8b8:	80 b1       	in	r24, 0x00	; 0
 8ba:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <SCI_HV_Distri_5V>
	SCI_SDB_Right_5V	=	(PINA & 00100000)>>5;
 8be:	80 b1       	in	r24, 0x00	; 0
 8c0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <SCI_SDB_Right_5V>
	SCI_INV1_5V			=	(PINA & 01000000)>>6;
 8c4:	80 b1       	in	r24, 0x00	; 0
 8c6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <SCI_INV1_5V>
	
	
uint8_t SCI_States = 0;
SCI_States |= (SCI_TSMS_5V<<0) | (SCI_INV0_5V<<1) | (SCI_TSAC_5V<<2) | (SCI_SDB_Left_5V<<3) | (SCI_HV_Distri_5V<<4) | (SCI_SDB_Right_5V<<5) | (SCI_INV1_5V);
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	22 0f       	add	r18, r18
 8ce:	33 1f       	adc	r19, r19
 8d0:	84 2f       	mov	r24, r20
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	88 0f       	add	r24, r24
 8d6:	99 1f       	adc	r25, r25
 8d8:	88 0f       	add	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	26 2b       	or	r18, r22
//data that will be sent through CAN packaged into SCI states variable
return SCI_States;

}
 8de:	82 2b       	or	r24, r18
 8e0:	08 95       	ret

000008e2 <__divmodhi4>:
 8e2:	97 fb       	bst	r25, 7
 8e4:	07 2e       	mov	r0, r23
 8e6:	16 f4       	brtc	.+4      	; 0x8ec <__divmodhi4+0xa>
 8e8:	00 94       	com	r0
 8ea:	06 d0       	rcall	.+12     	; 0x8f8 <__divmodhi4_neg1>
 8ec:	77 fd       	sbrc	r23, 7
 8ee:	08 d0       	rcall	.+16     	; 0x900 <__divmodhi4_neg2>
 8f0:	0b d0       	rcall	.+22     	; 0x908 <__udivmodhi4>
 8f2:	07 fc       	sbrc	r0, 7
 8f4:	05 d0       	rcall	.+10     	; 0x900 <__divmodhi4_neg2>
 8f6:	3e f4       	brtc	.+14     	; 0x906 <__divmodhi4_exit>

000008f8 <__divmodhi4_neg1>:
 8f8:	90 95       	com	r25
 8fa:	81 95       	neg	r24
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	08 95       	ret

00000900 <__divmodhi4_neg2>:
 900:	70 95       	com	r23
 902:	61 95       	neg	r22
 904:	7f 4f       	sbci	r23, 0xFF	; 255

00000906 <__divmodhi4_exit>:
 906:	08 95       	ret

00000908 <__udivmodhi4>:
 908:	aa 1b       	sub	r26, r26
 90a:	bb 1b       	sub	r27, r27
 90c:	51 e1       	ldi	r21, 0x11	; 17
 90e:	07 c0       	rjmp	.+14     	; 0x91e <__udivmodhi4_ep>

00000910 <__udivmodhi4_loop>:
 910:	aa 1f       	adc	r26, r26
 912:	bb 1f       	adc	r27, r27
 914:	a6 17       	cp	r26, r22
 916:	b7 07       	cpc	r27, r23
 918:	10 f0       	brcs	.+4      	; 0x91e <__udivmodhi4_ep>
 91a:	a6 1b       	sub	r26, r22
 91c:	b7 0b       	sbc	r27, r23

0000091e <__udivmodhi4_ep>:
 91e:	88 1f       	adc	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	5a 95       	dec	r21
 924:	a9 f7       	brne	.-22     	; 0x910 <__udivmodhi4_loop>
 926:	80 95       	com	r24
 928:	90 95       	com	r25
 92a:	bc 01       	movw	r22, r24
 92c:	cd 01       	movw	r24, r26
 92e:	08 95       	ret

00000930 <_exit>:
 930:	f8 94       	cli

00000932 <__stop_program>:
 932:	ff cf       	rjmp	.-2      	; 0x932 <__stop_program>
