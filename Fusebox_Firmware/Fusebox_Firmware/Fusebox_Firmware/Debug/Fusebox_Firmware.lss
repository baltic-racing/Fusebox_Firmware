
Fusebox_Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000be0  00000c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080011c  0080011c  00000c90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a3  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee3  00000000  00000000  000024eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c33  00000000  00000000  000033ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00004004  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000921  00000000  00000000  000042bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005bd  00000000  00000000  00004bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000519a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	ef c3       	rjmp	.+2014   	; 0x804 <__vector_9>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	8e c1       	rjmp	.+796    	; 0x34e <__vector_12>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	79 c3       	rjmp	.+1778   	; 0x734 <__vector_16>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__vector_25>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e0 ee       	ldi	r30, 0xE0	; 224
  a8:	fb e0       	ldi	r31, 0x0B	; 11
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ac 31       	cpi	r26, 0x1C	; 28
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	ac e1       	ldi	r26, 0x1C	; 28
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	ac 33       	cpi	r26, 0x3C	; 60
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	56 d1       	rcall	.+684    	; 0x378 <main>
  cc:	87 c5       	rjmp	.+2830   	; 0xbdc <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <adc_config>:
void adc_start_conversion()
{
	//start next conversion with same config
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0) | (1<<ADIE) | (1<<ADSC); //prescaler to 16
	//!!! Currently we have to Start the conversion manually with ADSC=1. Normally SMCR should auto trigger the conversion but as of now it does not work. neither do we know if the uC goes into Noise reduction mode
	SMCR = (1<<SM0)|(0<<SM1)|(0<<SM2); //enable ADC noise reduction mode and starts the conversion
  d0:	81 e4       	ldi	r24, 0x41	; 65
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	8c e8       	ldi	r24, 0x8C	; 140
  dc:	80 83       	st	Z, r24
  de:	80 81       	ld	r24, Z
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
  e4:	08 95       	ret

000000e6 <__vector_25>:
}


ISR(ADC_vect){
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	0b b6       	in	r0, 0x3b	; 59
  f2:	0f 92       	push	r0
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	8f 93       	push	r24
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	
	// store ADC result
	adc_values[adc_next] = ADC;
  fe:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 102:	e8 2f       	mov	r30, r24
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 10a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e9 5c       	subi	r30, 0xC9	; 201
 114:	fe 4f       	sbci	r31, 0xFE	; 254
 116:	31 83       	std	Z+1, r19	; 0x01
 118:	20 83       	st	Z, r18
	adc_next++;
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	
	// reset index var
	if(adc_next == 5){
 120:	85 30       	cpi	r24, 0x05	; 5
 122:	11 f4       	brne	.+4      	; 0x128 <__vector_25+0x42>
		adc_next = 0;
 124:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
	}
	// select other ADC Input
	ADMUX = (1<<REFS0) | adc_next;
 128:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	8f 91       	pop	r24
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0b be       	out	0x3b, r0	; 59
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <adc_get>:

// getter for each adc var
uint16_t adc_get(uint8_t adc)
{
	return adc_values[adc];
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	e9 5c       	subi	r30, 0xC9	; 201
 154:	fe 4f       	sbci	r31, 0xFE	; 254
 156:	80 81       	ld	r24, Z
 158:	91 81       	ldd	r25, Z+1	; 0x01
 15a:	08 95       	ret

0000015c <can_check_free>:

uint8_t can_check_free(uint8_t mobnum){
	
	uint8_t mob_status = 0;
	
	if(mobnum >= 8){
 15c:	88 30       	cpi	r24, 0x08	; 8
 15e:	78 f0       	brcs	.+30     	; 0x17e <can_check_free+0x22>
		
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
 160:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 97       	sbiw	r24, 0x08	; 8
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <can_check_free+0x14>
 16c:	35 95       	asr	r19
 16e:	27 95       	ror	r18
 170:	8a 95       	dec	r24
 172:	e2 f7       	brpl	.-8      	; 0x16c <can_check_free+0x10>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	20 ff       	sbrs	r18, 0
 178:	0d c0       	rjmp	.+26     	; 0x194 <can_check_free+0x38>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 95       	ret


		} else {
		
		mob_status = !((CANEN2 >> mobnum) &1);
 17e:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <can_check_free+0x2e>
 186:	35 95       	asr	r19
 188:	27 95       	ror	r18
 18a:	8a 95       	dec	r24
 18c:	e2 f7       	brpl	.-8      	; 0x186 <can_check_free+0x2a>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	20 fd       	sbrc	r18, 0
 192:	80 e0       	ldi	r24, 0x00	; 0
	}

	return mob_status;
	
}
 194:	08 95       	ret

00000196 <can_cfg>:
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
 196:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	29 c0       	rjmp	.+82     	; 0x1f0 <can_cfg+0x5a>
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
 19e:	80 e1       	ldi	r24, 0x10	; 16
 1a0:	48 9f       	mul	r20, r24
 1a2:	90 01       	movw	r18, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	82 2f       	mov	r24, r18
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANSTMOB = 0;
 1ae:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0;
 1b2:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANIDT4 = 0;
 1b6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDT3 = 0;
 1ba:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT2 = 0;
 1be:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT1 = 0;
 1c2:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDM4 = 0;
 1c6:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANIDM3 = 0;
 1ca:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM2 = 0;
 1ce:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM1 = 0;
 1d2:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		for (uint8_t byte = 0; byte < 8; byte++){
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <can_cfg+0x54>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
 1da:	98 2f       	mov	r25, r24
 1dc:	92 2b       	or	r25, r18
 1de:	98 60       	ori	r25, 0x08	; 8
 1e0:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			CANMSG = 0;
 1e4:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	88 30       	cpi	r24, 0x08	; 8
 1ec:	b0 f3       	brcs	.-20     	; 0x1da <can_cfg+0x44>
}
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
 1ee:	4f 5f       	subi	r20, 0xFF	; 255
 1f0:	4f 30       	cpi	r20, 0x0F	; 15
 1f2:	a8 f2       	brcs	.-86     	; 0x19e <can_cfg+0x8>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x00;// Set Baudrate
 1f4:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;// 500kBaud according
 1f8:	8c e0       	ldi	r24, 0x0C	; 12
 1fa:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x36;// to Datasheet S. 267
 1fe:	86 e3       	ldi	r24, 0x36	; 54
 200:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANGIE = 0;
 204:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	CANGCON |= (1<<ENASTB); // Enable CAN
 208:	e8 ed       	ldi	r30, 0xD8	; 216
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	80 83       	st	Z, r24
 212:	08 95       	ret

00000214 <can_rx>:
	
	
	
}
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
 21e:	8b 01       	movw	r16, r22
	
	CANPAGE = to_receive->mob_number << MOBNB0;
 220:	8c 81       	ldd	r24, Y+4	; 0x04
 222:	82 95       	swap	r24
 224:	80 7f       	andi	r24, 0xF0	; 240
 226:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_receive->mob_number)){
 22a:	8c 81       	ldd	r24, Y+4	; 0x04
 22c:	97 df       	rcall	.-210    	; 0x15c <can_check_free>
 22e:	88 23       	and	r24, r24
 230:	71 f1       	breq	.+92     	; 0x28e <can_rx+0x7a>
		/* load the id 11 bit */
		CANIDT1 = to_receive->mob_id >>3;
 232:	88 81       	ld	r24, Y
 234:	99 81       	ldd	r25, Y+1	; 0x01
 236:	96 95       	lsr	r25
 238:	87 95       	ror	r24
 23a:	96 95       	lsr	r25
 23c:	87 95       	ror	r24
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_receive->mob_id << 5)&0b11100000;
 246:	88 81       	ld	r24, Y
 248:	82 95       	swap	r24
 24a:	88 0f       	add	r24, r24
 24c:	80 7e       	andi	r24, 0xE0	; 224
 24e:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 252:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 1<<RTRTAG;
 256:	84 e0       	ldi	r24, 0x04	; 4
 258:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = to_receive->mob_idmask >>3;
 25c:	8a 81       	ldd	r24, Y+2	; 0x02
 25e:	9b 81       	ldd	r25, Y+3	; 0x03
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	96 95       	lsr	r25
 26a:	87 95       	ror	r24
 26c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = (to_receive->mob_idmask <<5)&0b11100000;
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	82 95       	swap	r24
 274:	88 0f       	add	r24, r24
 276:	80 7e       	andi	r24, 0xE0	; 224
 278:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 27c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 280:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
 284:	88 ec       	ldi	r24, 0xC8	; 200
 286:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 28a:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANGCON |= (1<<ENASTB); // Enable CAN
	
	
	
}
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	10 c0       	rjmp	.+32     	; 0x2b2 <can_rx+0x9e>
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
 292:	8c 81       	ldd	r24, Y+4	; 0x04
 294:	30 e1       	ldi	r19, 0x10	; 16
 296:	83 9f       	mul	r24, r19
 298:	c0 01       	movw	r24, r0
 29a:	11 24       	eor	r1, r1
 29c:	82 2b       	or	r24, r18
 29e:	88 60       	ori	r24, 0x08	; 8
 2a0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		data[byte] = CANMSG;
 2a4:	f8 01       	movw	r30, r16
 2a6:	e2 0f       	add	r30, r18
 2a8:	f1 1d       	adc	r31, r1
 2aa:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
 2ae:	80 83       	st	Z, r24
		CANIDM4 = 0;
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
 2b0:	2f 5f       	subi	r18, 0xFF	; 255
 2b2:	28 30       	cpi	r18, 0x08	; 8
 2b4:	70 f3       	brcs	.-36     	; 0x292 <can_rx+0x7e>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	08 95       	ret

000002c0 <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
	
	for(uint8_t byte = 0; byte <8; byte++){
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	10 c0       	rjmp	.+32     	; 0x2ea <can_tx+0x2a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
 2ca:	8c 81       	ldd	r24, Y+4	; 0x04
 2cc:	30 e1       	ldi	r19, 0x10	; 16
 2ce:	83 9f       	mul	r24, r19
 2d0:	c0 01       	movw	r24, r0
 2d2:	11 24       	eor	r1, r1
 2d4:	82 2b       	or	r24, r18
 2d6:	88 60       	ori	r24, 0x08	; 8
 2d8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANMSG = data[byte];
 2dc:	fb 01       	movw	r30, r22
 2de:	e2 0f       	add	r30, r18
 2e0:	f1 1d       	adc	r31, r1
 2e2:	80 81       	ld	r24, Z
 2e4:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
 2e8:	2f 5f       	subi	r18, 0xFF	; 255
 2ea:	28 30       	cpi	r18, 0x08	; 8
 2ec:	70 f3       	brcs	.-36     	; 0x2ca <can_tx+0xa>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
 2ee:	8c 81       	ldd	r24, Y+4	; 0x04
 2f0:	82 95       	swap	r24
 2f2:	80 7f       	andi	r24, 0xF0	; 240
 2f4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(to_send->mob_number)){
 2f8:	8c 81       	ldd	r24, Y+4	; 0x04
 2fa:	30 df       	rcall	.-416    	; 0x15c <can_check_free>
 2fc:	88 23       	and	r24, r24
 2fe:	21 f1       	breq	.+72     	; 0x348 <can_tx+0x88>
		CANSTMOB = 0;
 300:	ee ee       	ldi	r30, 0xEE	; 238
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
 306:	88 81       	ld	r24, Y
 308:	99 81       	ldd	r25, Y+1	; 0x01
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	96 95       	lsr	r25
 314:	87 95       	ror	r24
 316:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
 31a:	88 81       	ld	r24, Y
 31c:	82 95       	swap	r24
 31e:	88 0f       	add	r24, r24
 320:	80 7e       	andi	r24, 0xE0	; 224
 322:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
 326:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
 32a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0; //0b11111111;
 32e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0; //0b11100000;
 332:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
 336:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
 33a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANSTMOB = 0;
 33e:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
 340:	88 e4       	ldi	r24, 0x48	; 72
 342:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
 346:	10 82       	st	Z, r1
	}
	
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <__vector_12>:
TIMSK1 = (1<<OCIE1A);														//Output Compare interrupt flag will be set whenever OCR1A is reached
OCR1A = 63;													// TOP  16000000/(8*(1+64)) = 30769.23077 Hz = ~30kHz => page 130   with TOP value 62+1 the resolution is 6 bit => page 128
OCR1B = 10;                         	// BOTTOM
}

ISR(TIMER1_COMPA_vect){									//ISR for the timer 1, updating the duty cycle
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	8f 93       	push	r24
 35a:	9f 93       	push	r25
//cli();
OCR1B = fan_duty;
 35c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <fan_duty>
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 366:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
//sei();
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <main>:
extern volatile unsigned char DRV_EN;
uint16_t apps = 0;
int16_t ac_current = 0;
uint16_t current_limit = 25; //in Ampere

int main(void){
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	c5 57       	subi	r28, 0x75	; 117
 382:	d1 09       	sbc	r29, r1
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	f8 94       	cli
 388:	de bf       	out	0x3e, r29	; 62
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	cd bf       	out	0x3d, r28	; 61

sys_timer_config();
 38e:	c5 d1       	rcall	.+906    	; 0x71a <sys_timer_config>
port_config();
 390:	bb d1       	rcall	.+886    	; 0x708 <port_config>
can_cfg();
 392:	01 df       	rcall	.-510    	; 0x196 <can_cfg>
adc_config();
 394:	9d de       	rcall	.-710    	; 0xd0 <adc_config>
 396:	17 d2       	rcall	.+1070   	; 0x7c6 <timer2_config>
timer2_config();
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	96 e0       	ldi	r25, 0x06	; 6

struct CAN_MOB can_Fusebox0_mob;
can_Fusebox0_mob.mob_id = 0x600;
 39c:	9a 83       	std	Y+2, r25	; 0x02
 39e:	89 83       	std	Y+1, r24	; 0x01
 3a0:	1c 82       	std	Y+4, r1	; 0x04
 3a2:	1b 82       	std	Y+3, r1	; 0x03
can_Fusebox0_mob.mob_idmask = 0; //sent
 3a4:	1d 82       	std	Y+5, r1	; 0x05
 3a6:	81 e0       	ldi	r24, 0x01	; 1
can_Fusebox0_mob.mob_number = 0;
 3a8:	96 e0       	ldi	r25, 0x06	; 6
uint8_t Fusebox0_databytes[8];

struct CAN_MOB can_Fusebox1_mob;
can_Fusebox1_mob.mob_id = 0x601;
 3aa:	9f 87       	std	Y+15, r25	; 0x0f
 3ac:	8e 87       	std	Y+14, r24	; 0x0e
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	90 e0       	ldi	r25, 0x00	; 0
can_Fusebox1_mob.mob_idmask = 0xFF; //sent
 3b2:	99 8b       	std	Y+17, r25	; 0x11
 3b4:	88 8b       	std	Y+16, r24	; 0x10
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	2a 8b       	std	Y+18, r18	; 0x12
can_Fusebox1_mob.mob_number = 1;
 3ba:	2f e9       	ldi	r18, 0x9F	; 159
 3bc:	34 e0       	ldi	r19, 0x04	; 4
uint8_t INV0_SN = 2; 
uint8_t INV1_SN = 1;
uint8_t INVX_SN = 0x1F; //(Broadcast)

struct CAN_MOB can_Fusebox2_mob; //to INVX (Drive Enable)
can_Fusebox2_mob.mob_id = (0x24 << 5) | (INVX_SN); //ID 0x481
 3be:	3c 8f       	std	Y+28, r19	; 0x1c
 3c0:	2b 8f       	std	Y+27, r18	; 0x1b
 3c2:	9e 8f       	std	Y+30, r25	; 0x1e
 3c4:	8d 8f       	std	Y+29, r24	; 0x1d
can_Fusebox2_mob.mob_idmask = 0xFF; //sent
 3c6:	22 e0       	ldi	r18, 0x02	; 2
 3c8:	2f 8f       	std	Y+31, r18	; 0x1f
can_Fusebox2_mob.mob_number = 2;
 3ca:	28 e0       	ldi	r18, 0x08	; 8
 3cc:	ec e0       	ldi	r30, 0x0C	; 12
uint8_t Fusebox2_databytes[8] = {0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 3ce:	f1 e0       	ldi	r31, 0x01	; 1
 3d0:	de 01       	movw	r26, r28
 3d2:	90 96       	adiw	r26, 0x20	; 32
 3d4:	01 90       	ld	r0, Z+
 3d6:	0d 92       	st	X+, r0
 3d8:	2a 95       	dec	r18
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <main+0x5c>
 3dc:	2f e5       	ldi	r18, 0x5F	; 95
 3de:	33 e0       	ldi	r19, 0x03	; 3

struct CAN_MOB can_Fusebox3_mob; //to INVX (AC Peak Current)
can_Fusebox3_mob.mob_id = (0x1A << 5) | (INVX_SN); //ID 0x342
 3e0:	39 a7       	std	Y+41, r19	; 0x29
 3e2:	28 a7       	std	Y+40, r18	; 0x28
 3e4:	9b a7       	std	Y+43, r25	; 0x2b
 3e6:	8a a7       	std	Y+42, r24	; 0x2a
can_Fusebox3_mob.mob_idmask = 0xFF; //sent
 3e8:	23 e0       	ldi	r18, 0x03	; 3
 3ea:	2c a7       	std	Y+44, r18	; 0x2c
can_Fusebox3_mob.mob_number = 3;
 3ec:	28 e0       	ldi	r18, 0x08	; 8
 3ee:	e4 e1       	ldi	r30, 0x14	; 20
uint8_t Fusebox3_databytes[8] = {0, 0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 3f0:	f1 e0       	ldi	r31, 0x01	; 1
 3f2:	de 01       	movw	r26, r28
 3f4:	9d 96       	adiw	r26, 0x2d	; 45
 3f6:	01 90       	ld	r0, Z+
 3f8:	0d 92       	st	X+, r0
 3fa:	2a 95       	dec	r18
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x7e>
 3fe:	2f e1       	ldi	r18, 0x1F	; 31
 400:	34 e0       	ldi	r19, 0x04	; 4
can_Fusebox3_1_mob.mob_number = 4;
uint8_t Fusebox3_1_databytes[8] = {0, 0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
*/

struct CAN_MOB can_Fusebox4_mob; //to INVX (AC Peak Current Limit)
can_Fusebox4_mob.mob_id = (0x20 << 5) | (INVX_SN);
 402:	3e ab       	std	Y+54, r19	; 0x36
 404:	2d ab       	std	Y+53, r18	; 0x35
 406:	98 af       	std	Y+56, r25	; 0x38
 408:	8f ab       	std	Y+55, r24	; 0x37
can_Fusebox4_mob.mob_idmask = 0xFF; //sent
 40a:	85 e0       	ldi	r24, 0x05	; 5
 40c:	89 af       	std	Y+57, r24	; 0x39
can_Fusebox4_mob.mob_number = 5;
 40e:	88 e0       	ldi	r24, 0x08	; 8
 410:	e4 e1       	ldi	r30, 0x14	; 20
uint8_t Fusebox4_databytes[8] = {0, 0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 412:	f1 e0       	ldi	r31, 0x01	; 1
 414:	de 01       	movw	r26, r28
 416:	da 96       	adiw	r26, 0x3a	; 58
 418:	01 90       	ld	r0, Z+
 41a:	0d 92       	st	X+, r0
 41c:	8a 95       	dec	r24
 41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	94 e0       	ldi	r25, 0x04	; 4

struct CAN_MOB can_SHR0_mob;
can_SHR0_mob.mob_id = 0x400;
 424:	24 96       	adiw	r28, 0x04	; 4
 426:	9f af       	std	Y+63, r25	; 0x3f
 428:	8e af       	std	Y+62, r24	; 0x3e
 42a:	24 97       	sbiw	r28, 0x04	; 4
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	97 e0       	ldi	r25, 0x07	; 7
can_SHR0_mob.mob_idmask = 0b11111111111; //receive with no filer?
 430:	26 96       	adiw	r28, 0x06	; 6
 432:	9f af       	std	Y+63, r25	; 0x3f
 434:	8e af       	std	Y+62, r24	; 0x3e
 436:	26 97       	sbiw	r28, 0x06	; 6
 438:	26 e0       	ldi	r18, 0x06	; 6
 43a:	27 96       	adiw	r28, 0x07	; 7
can_SHR0_mob.mob_number = 6;  //IDs might be wrong
 43c:	2f af       	std	Y+63, r18	; 0x3f
 43e:	27 97       	sbiw	r28, 0x07	; 7
 440:	20 e2       	ldi	r18, 0x20	; 32
 442:	34 e0       	ldi	r19, 0x04	; 4
uint8_t SHR0_databytes[8];

struct CAN_MOB can_SHB0_mob;
can_SHB0_mob.mob_id = 0x420;
 444:	61 96       	adiw	r28, 0x11	; 17
 446:	3f af       	std	Y+63, r19	; 0x3f
 448:	2e af       	std	Y+62, r18	; 0x3e
 44a:	61 97       	sbiw	r28, 0x11	; 17
 44c:	63 96       	adiw	r28, 0x13	; 19
 44e:	9f af       	std	Y+63, r25	; 0x3f
can_SHB0_mob.mob_idmask = 0b11111111111; //receive with no filter?
 450:	8e af       	std	Y+62, r24	; 0x3e
 452:	63 97       	sbiw	r28, 0x13	; 19
 454:	87 e0       	ldi	r24, 0x07	; 7
 456:	64 96       	adiw	r28, 0x14	; 20
can_SHB0_mob.mob_number = 7;
 458:	8f af       	std	Y+63, r24	; 0x3f
 45a:	64 97       	sbiw	r28, 0x14	; 20
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	95 e0       	ldi	r25, 0x05	; 5
uint8_t SHB0_databytes[8];

struct CAN_MOB can_DIC0_mob;	
can_DIC0_mob.mob_id = 0x500;
 460:	6e 96       	adiw	r28, 0x1e	; 30
 462:	9f af       	std	Y+63, r25	; 0x3f
 464:	8e af       	std	Y+62, r24	; 0x3e
 466:	6e 97       	sbiw	r28, 0x1e	; 30
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	9f ef       	ldi	r25, 0xFF	; 255
can_DIC0_mob.mob_idmask = 0xffff;
 46c:	a0 96       	adiw	r28, 0x20	; 32
 46e:	9f af       	std	Y+63, r25	; 0x3f
 470:	8e af       	std	Y+62, r24	; 0x3e
 472:	a0 97       	sbiw	r28, 0x20	; 32
 474:	28 e0       	ldi	r18, 0x08	; 8
 476:	a1 96       	adiw	r28, 0x21	; 33
can_DIC0_mob.mob_number = 8;
 478:	2f af       	std	Y+63, r18	; 0x3f
 47a:	a1 97       	sbiw	r28, 0x21	; 33
 47c:	23 e0       	ldi	r18, 0x03	; 3
 47e:	32 e0       	ldi	r19, 0x02	; 2
uint8_t DIC0_databytes[8];
uint8_t TS_ACT = 0;

struct CAN_MOB can_BMS3_mob;
can_BMS3_mob.mob_id = 0x203;
 480:	ab 96       	adiw	r28, 0x2b	; 43
 482:	3f af       	std	Y+63, r19	; 0x3f
 484:	2e af       	std	Y+62, r18	; 0x3e
 486:	ab 97       	sbiw	r28, 0x2b	; 43
 488:	ad 96       	adiw	r28, 0x2d	; 45
 48a:	9f af       	std	Y+63, r25	; 0x3f
can_BMS3_mob.mob_idmask = 0xffff;
 48c:	8e af       	std	Y+62, r24	; 0x3e
 48e:	ad 97       	sbiw	r28, 0x2d	; 45
 490:	89 e0       	ldi	r24, 0x09	; 9
 492:	ae 96       	adiw	r28, 0x2e	; 46
can_BMS3_mob.mob_number = 9;
 494:	8f af       	std	Y+63, r24	; 0x3f
 496:	ae 97       	sbiw	r28, 0x2e	; 46
 498:	78 94       	sei
 49a:	10 e0       	ldi	r17, 0x00	; 0
uint8_t BMS3_databytes[8];
uint8_t TS_RDY = 0;

uint8_t R2D_bit = 0;

sei();
 49c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <sys_time>

//	SUPERLOOP STARTS HERE
	
	while (1){
		if(TIME_PASSED_10_MS)
 4a0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <sys_time+0x1>
 4a4:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <sys_time+0x2>
 4a8:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <sys_time+0x3>
 4ac:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <time_old>
 4b0:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <time_old+0x1>
 4b4:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <time_old+0x2>
 4b8:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <time_old+0x3>
 4bc:	6c 01       	movw	r12, r24
 4be:	7d 01       	movw	r14, r26
 4c0:	c4 1a       	sub	r12, r20
 4c2:	d5 0a       	sbc	r13, r21
 4c4:	e6 0a       	sbc	r14, r22
 4c6:	f7 0a       	sbc	r15, r23
 4c8:	b7 01       	movw	r22, r14
 4ca:	a6 01       	movw	r20, r12
 4cc:	4a 30       	cpi	r20, 0x0A	; 10
 4ce:	51 05       	cpc	r21, r1
 4d0:	61 05       	cpc	r22, r1
 4d2:	71 05       	cpc	r23, r1
 4d4:	08 f4       	brcc	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d6:	d8 c0       	rjmp	.+432    	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
 4d8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <time_old>
			{
			time_old = sys_time; 
 4dc:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <time_old+0x1>
 4e0:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <time_old+0x2>
 4e4:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <time_old+0x3>
 4e8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <time_old_100ms>
			time_old_100ms++; 
 4ec:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <time_old_100ms+0x1>
 4f0:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <time_old_100ms+0x2>
 4f4:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <time_old_100ms+0x3>
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	a1 1d       	adc	r26, r1
 4fc:	b1 1d       	adc	r27, r1
 4fe:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <time_old_100ms>
 502:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <time_old_100ms+0x1>
 506:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <time_old_100ms+0x2>
 50a:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <time_old_100ms+0x3>
 50e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <time_200ms>
			time_200ms++;
 512:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <time_200ms+0x1>
 516:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <time_200ms+0x2>
 51a:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <time_200ms+0x3>
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	a1 1d       	adc	r26, r1
 522:	b1 1d       	adc	r27, r1
 524:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <time_200ms>
 528:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <time_200ms+0x1>
 52c:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <time_200ms+0x2>
 530:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <time_200ms+0x3>
 534:	be 01       	movw	r22, r28
 536:	69 5b       	subi	r22, 0xB9	; 185

			can_rx(&can_SHR0_mob, SHR0_databytes);
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	ce 01       	movw	r24, r28
 53c:	8e 5b       	subi	r24, 0xBE	; 190
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	69 de       	rcall	.-814    	; 0x214 <can_rx>
 542:	be 01       	movw	r22, r28
 544:	6c 5a       	subi	r22, 0xAC	; 172
			can_rx(&can_SHB0_mob, SHB0_databytes);
 546:	7f 4f       	sbci	r23, 0xFF	; 255
 548:	ce 01       	movw	r24, r28
 54a:	81 5b       	subi	r24, 0xB1	; 177
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	62 de       	rcall	.-828    	; 0x214 <can_rx>
 550:	be 01       	movw	r22, r28
 552:	6f 59       	subi	r22, 0x9F	; 159
			can_rx(&can_DIC0_mob, DIC0_databytes);
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	ce 01       	movw	r24, r28
 558:	84 5a       	subi	r24, 0xA4	; 164
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	5b de       	rcall	.-842    	; 0x214 <can_rx>
 55e:	be 01       	movw	r22, r28
 560:	62 59       	subi	r22, 0x92	; 146
			can_rx(&can_BMS3_mob, BMS3_databytes);
 562:	7f 4f       	sbci	r23, 0xFF	; 255
 564:	ce 01       	movw	r24, r28
 566:	87 59       	subi	r24, 0x97	; 151
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	54 de       	rcall	.-856    	; 0x214 <can_rx>
 56c:	a3 96       	adiw	r28, 0x23	; 35
 56e:	ff ac       	ldd	r15, Y+63	; 0x3f
 570:	a3 97       	sbiw	r28, 0x23	; 35
			
			TS_ACT = DIC0_databytes[1];
 572:	af 96       	adiw	r28, 0x2f	; 47
 574:	0f ad       	ldd	r16, Y+63	; 0x3f
 576:	af 97       	sbiw	r28, 0x2f	; 47
			TS_RDY = BMS3_databytes[0];
 578:	28 96       	adiw	r28, 0x08	; 8
 57a:	2f ad       	ldd	r18, Y+63	; 0x3f
 57c:	28 97       	sbiw	r28, 0x08	; 8
			
			apps = ((SHR0_databytes[0]) | (SHR0_databytes[1] << 8))/10;	//APPS values from 0 to 1000 --> /10
 57e:	29 96       	adiw	r28, 0x09	; 9
 580:	8f ad       	ldd	r24, Y+63	; 0x3f
 582:	29 97       	sbiw	r28, 0x09	; 9
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	98 2f       	mov	r25, r24
 588:	88 27       	eor	r24, r24
 58a:	82 2b       	or	r24, r18
 58c:	6a e0       	ldi	r22, 0x0A	; 10
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	fe d2       	rcall	.+1532   	; 0xb8e <__divmodhi4>
 592:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <apps+0x1>
 596:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <apps>
 59a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			ac_current = calculate_ac_current(current_limit, apps);
 59e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5a2:	ed d0       	rcall	.+474    	; 0x77e <calculate_ac_current>
 5a4:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <ac_current+0x1>
 5a8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <ac_current>
			
 			Fusebox0_databytes[0]	=	adc_get(0)&0xff			;
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	cd dd       	rcall	.-1126   	; 0x14a <adc_get>
 5b0:	8e 83       	std	Y+6, r24	; 0x06
 5b2:	80 e0       	ldi	r24, 0x00	; 0
			Fusebox0_databytes[1]	=	(adc_get(0)>>8)&0xff	;	
 5b4:	ca dd       	rcall	.-1132   	; 0x14a <adc_get>
 5b6:	9f 83       	std	Y+7, r25	; 0x07
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	c7 dd       	rcall	.-1138   	; 0x14a <adc_get>
 			Fusebox0_databytes[2]	=	adc_get(1)&0xff			;	
 5bc:	88 87       	std	Y+8, r24	; 0x08
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	c4 dd       	rcall	.-1144   	; 0x14a <adc_get>
 5c2:	99 87       	std	Y+9, r25	; 0x09
 			Fusebox0_databytes[3]	=	(adc_get(1)>>8)&0xff	; 
 5c4:	1a 86       	std	Y+10, r1	; 0x0a
 5c6:	1b 86       	std	Y+11, r1	; 0x0b
 5c8:	1c 86       	std	Y+12, r1	; 0x0c
 5ca:	1d 86       	std	Y+13, r1	; 0x0d
			Fusebox0_databytes[4]	=	0						;
 5cc:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <ac_current>
			Fusebox0_databytes[5]	=	0						;
 			Fusebox0_databytes[6]	=	0						;
 5d0:	82 2f       	mov	r24, r18
			Fusebox0_databytes[7]	=	0						;
 5d2:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <ac_current+0x1>
			
			Fusebox3_databytes[0] = (ac_current*10>> 8);
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	ac 01       	movw	r20, r24
 5dc:	44 0f       	add	r20, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	44 0f       	add	r20, r20
 5e2:	55 1f       	adc	r21, r21
 5e4:	84 0f       	add	r24, r20
 5e6:	95 1f       	adc	r25, r21
 5e8:	9d a7       	std	Y+45, r25	; 0x2d
 5ea:	82 2f       	mov	r24, r18
 5ec:	88 0f       	add	r24, r24
 5ee:	98 2f       	mov	r25, r24
 5f0:	99 0f       	add	r25, r25
			Fusebox3_databytes[1] = ac_current*10;
 5f2:	99 0f       	add	r25, r25
 5f4:	89 0f       	add	r24, r25
 5f6:	8e a7       	std	Y+46, r24	; 0x2e
 5f8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5fc:	82 2f       	mov	r24, r18
 5fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			//Fusebox3_1_databytes[0] = (ac_current*10 >> 8);
			//Fusebox3_1_databytes[1] = ac_current*10;
			Fusebox4_databytes[0] = (current_limit*10 >> 8);
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	ac 01       	movw	r20, r24
 608:	44 0f       	add	r20, r20
 60a:	55 1f       	adc	r21, r21
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	84 0f       	add	r24, r20
 612:	95 1f       	adc	r25, r21
 614:	9a af       	std	Y+58, r25	; 0x3a
 616:	82 2f       	mov	r24, r18
 618:	88 0f       	add	r24, r24
 61a:	98 2f       	mov	r25, r24
 61c:	99 0f       	add	r25, r25
			Fusebox4_databytes[1] = current_limit*10;
 61e:	99 0f       	add	r25, r25
 620:	89 0f       	add	r24, r25
 622:	8b af       	std	Y+59, r24	; 0x3b
 624:	01 30       	cpi	r16, 0x01	; 1
 626:	61 f4       	brne	.+24     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 628:	dd 24       	eor	r13, r13
			
			//	TS ACTIVATE PROCEDURE
			
			//TS_RDY = 1;
			
			if (TS_RDY == 1)
 62a:	d3 94       	inc	r13
 62c:	fd 10       	cpse	r15, r13
			{
				if ((TS_ACT == 1) && (R2D_bit == 0))
 62e:	0b c0       	rjmp	.+22     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 630:	11 11       	cpse	r17, r1
 632:	09 c0       	rjmp	.+18     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 634:	d1 d0       	rcall	.+418    	; 0x7d8 <R2D>
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <DRV_EN>
				{
					R2D();
 63c:	11 e0       	ldi	r17, 0x01	; 1
					R2D_bit = 1;
					DRV_EN = 1;
 63e:	03 c0       	rjmp	.+6      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 640:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <DRV_EN>
			if (TS_RDY == 1)
			{
				if ((TS_ACT == 1) && (R2D_bit == 0))
				{
					R2D();
					R2D_bit = 1;
 644:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
			else
			{
				R2D_bit = 0;
				DRV_EN = 0;
 646:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <DRV_EN>
			}
			
			Fusebox2_databytes[0] = DRV_EN;
 64a:	88 a3       	std	Y+32, r24	; 0x20
 64c:	be 01       	movw	r22, r28
 64e:	6a 5f       	subi	r22, 0xFA	; 250
			 
			can_tx(&can_Fusebox0_mob, Fusebox0_databytes);	//(0x600 --> Board Voltages)
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	ce 01       	movw	r24, r28
 654:	01 96       	adiw	r24, 0x01	; 1
 656:	34 de       	rcall	.-920    	; 0x2c0 <can_tx>
 658:	be 01       	movw	r22, r28
 65a:	6d 5e       	subi	r22, 0xED	; 237
			can_tx(&can_Fusebox1_mob, Fusebox1_databytes);	//(0x601 --> SDC Indicator)
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	ce 01       	movw	r24, r28
 660:	0e 96       	adiw	r24, 0x0e	; 14
 662:	2e de       	rcall	.-932    	; 0x2c0 <can_tx>
 664:	be 01       	movw	r22, r28
 666:	60 5e       	subi	r22, 0xE0	; 224
			can_tx(&can_Fusebox2_mob, Fusebox2_databytes);	//(DRV Enable)
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	ce 01       	movw	r24, r28
 66c:	4b 96       	adiw	r24, 0x1b	; 27
 66e:	28 de       	rcall	.-944    	; 0x2c0 <can_tx>
 670:	be 01       	movw	r22, r28
 672:	63 5d       	subi	r22, 0xD3	; 211
 674:	7f 4f       	sbci	r23, 0xFF	; 255
			can_tx(&can_Fusebox3_mob, Fusebox3_databytes);	//(AC Current)
 676:	ce 01       	movw	r24, r28
 678:	88 96       	adiw	r24, 0x28	; 40
 67a:	22 de       	rcall	.-956    	; 0x2c0 <can_tx>
 67c:	be 01       	movw	r22, r28
 67e:	66 5c       	subi	r22, 0xC6	; 198
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	ce 01       	movw	r24, r28
			//can_tx(&can_Fusebox3_1_mob, Fusebox3_databytes);	//(AC Current)
			can_tx(&can_Fusebox4_mob, Fusebox4_databytes);	//(AC Current Limit)
 684:	c5 96       	adiw	r24, 0x35	; 53
 686:	1c de       	rcall	.-968    	; 0x2c0 <can_tx>
 688:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <time_old_100ms>
 68c:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <time_old_100ms+0x1>
 690:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <time_old_100ms+0x2>
	
			}	//end of 10 ms cycle
	
		if (TIME_PASSED_100_MS)
 694:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <time_old_100ms+0x3>
 698:	84 36       	cpi	r24, 0x64	; 100
 69a:	91 05       	cpc	r25, r1
 69c:	a1 05       	cpc	r26, r1
 69e:	b1 05       	cpc	r27, r1
 6a0:	48 f0       	brcs	.+18     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
 6a2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <time_old_100ms>
 6a6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <time_old_100ms+0x1>
		{ //100 ms
 			time_old_100ms = 0;
 6aa:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <time_old_100ms+0x2>
 6ae:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <time_old_100ms+0x3>
 6b2:	3b d0       	rcall	.+118    	; 0x72a <sys_tick_heart>
 6b4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <time_200ms>
 6b8:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <time_200ms+0x1>
 			sys_tick_heart();  //remove the sys_, tick_heart obvious by itself
 6bc:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <time_200ms+0x2>
			 
 		}  //end of 100ms
		if (time_200ms >= 20)
 6c0:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <time_200ms+0x3>
 6c4:	44 97       	sbiw	r24, 0x14	; 20
 6c6:	a1 05       	cpc	r26, r1
 6c8:	b1 05       	cpc	r27, r1
 6ca:	08 f4       	brcc	.+2      	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6cc:	e7 ce       	rjmp	.-562    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 6ce:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <time_200ms>
 6d2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <time_200ms+0x1>
 6d6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <time_200ms+0x2>
		{
			time_200ms = 0;
 6da:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <time_200ms+0x3>
 6de:	86 b1       	in	r24, 0x06	; 6
 6e0:	8b 8b       	std	Y+19, r24	; 0x13
 6e2:	1c 8a       	std	Y+20, r1	; 0x14
 6e4:	80 b1       	in	r24, 0x00	; 0
			
			Fusebox1_databytes[0]	=	SCI_read_out()			;
 6e6:	8c b1       	in	r24, 0x0c	; 12
 6e8:	8d 8b       	std	Y+21, r24	; 0x15
			Fusebox1_databytes[1]	= 0;
 6ea:	9c b1       	in	r25, 0x0c	; 12
			Fusebox1_databytes[2]	=	fuse_read_out()&0xff		;
 6ec:	80 b1       	in	r24, 0x00	; 0
 6ee:	89 2b       	or	r24, r25
 6f0:	8e 8b       	std	Y+22, r24	; 0x16
			Fusebox1_databytes[3]	=	(fuse_read_out()>>8)&0xff	;
 6f2:	1f 8a       	std	Y+23, r1	; 0x17
 6f4:	18 8e       	std	Y+24, r1	; 0x18
 6f6:	19 8e       	std	Y+25, r1	; 0x19
 6f8:	1a 8e       	std	Y+26, r1	; 0x1a
			Fusebox1_databytes[4]	= 0;
 6fa:	be 01       	movw	r22, r28
			Fusebox1_databytes[5]	= 0;
 6fc:	6d 5e       	subi	r22, 0xED	; 237
			Fusebox1_databytes[6]	= 0;
 6fe:	7f 4f       	sbci	r23, 0xFF	; 255
			Fusebox1_databytes[7]	= 0;
 700:	ce 01       	movw	r24, r28
			
			can_tx(&can_Fusebox1_mob, Fusebox1_databytes);
 702:	0e 96       	adiw	r24, 0x0e	; 14
 704:	dd dd       	rcall	.-1094   	; 0x2c0 <can_tx>
 706:	ca ce       	rjmp	.-620    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>

00000708 <port_config>:
 708:	11 b8       	out	0x01, r1	; 1
 70a:	8d e3       	ldi	r24, 0x3D	; 61
 70c:	84 b9       	out	0x04, r24	; 4
 70e:	17 b8       	out	0x07, r1	; 7
 710:	8c e0       	ldi	r24, 0x0C	; 12
void fault_not_detected(){	
	PORTB &= ~(1<<PB3); //turn off red led in case of no fault
}

void fault_detected(){
	PORTB |= (1<<PB3); //turn on red led when called (fault present)
 712:	8a b9       	out	0x0a, r24	; 10
 714:	1d b8       	out	0x0d, r1	; 13
 716:	10 ba       	out	0x10, r1	; 16
 718:	08 95       	ret

0000071a <sys_timer_config>:
 71a:	8b e0       	ldi	r24, 0x0B	; 11
 71c:	84 bd       	out	0x24, r24	; 36
 71e:	89 ef       	ldi	r24, 0xF9	; 249
 720:	87 bd       	out	0x27, r24	; 39
 722:	82 e0       	ldi	r24, 0x02	; 2
 724:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 728:	08 95       	ret

0000072a <sys_tick_heart>:
 72a:	95 b1       	in	r25, 0x05	; 5
 72c:	80 e1       	ldi	r24, 0x10	; 16
 72e:	89 27       	eor	r24, r25
 730:	85 b9       	out	0x05, r24	; 5
 732:	08 95       	ret

00000734 <__vector_16>:
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
 742:	af 93       	push	r26
 744:	bf 93       	push	r27
 746:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <sys_time>
 74a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <sys_time+0x1>
 74e:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <sys_time+0x2>
 752:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <sys_time+0x3>
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	a1 1d       	adc	r26, r1
 75a:	b1 1d       	adc	r27, r1
 75c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <sys_time>
 760:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <sys_time+0x1>
 764:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <sys_time+0x2>
 768:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <sys_time+0x3>
 76c:	bf 91       	pop	r27
 76e:	af 91       	pop	r26
 770:	9f 91       	pop	r25
 772:	8f 91       	pop	r24
 774:	0f 90       	pop	r0
 776:	0f be       	out	0x3f, r0	; 63
 778:	0f 90       	pop	r0
 77a:	1f 90       	pop	r1
 77c:	18 95       	reti

0000077e <calculate_ac_current>:
}

int16_t calculate_ac_current(uint16_t limit, uint16_t value){
 77e:	cf 92       	push	r12
 780:	df 92       	push	r13
 782:	ef 92       	push	r14
 784:	ff 92       	push	r15
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	eb 01       	movw	r28, r22
		
	return (int16_t)((float)limit * ((float)value/100));
 78c:	bc 01       	movw	r22, r24
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0c d1       	rcall	.+536    	; 0x9ac <__floatunsisf>
 794:	6b 01       	movw	r12, r22
 796:	7c 01       	movw	r14, r24
 798:	be 01       	movw	r22, r28
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	06 d1       	rcall	.+524    	; 0x9ac <__floatunsisf>
 7a0:	20 e0       	ldi	r18, 0x00	; 0
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	48 ec       	ldi	r20, 0xC8	; 200
 7a6:	52 e4       	ldi	r21, 0x42	; 66
 7a8:	68 d0       	rcall	.+208    	; 0x87a <__divsf3>
 7aa:	9b 01       	movw	r18, r22
 7ac:	ac 01       	movw	r20, r24
 7ae:	c7 01       	movw	r24, r14
 7b0:	b6 01       	movw	r22, r12
 7b2:	8a d1       	rcall	.+788    	; 0xac8 <__mulsf3>
 7b4:	ca d0       	rcall	.+404    	; 0x94a <__fixsfsi>
 7b6:	cb 01       	movw	r24, r22
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	ff 90       	pop	r15
 7be:	ef 90       	pop	r14
 7c0:	df 90       	pop	r13
 7c2:	cf 90       	pop	r12
 7c4:	08 95       	ret

000007c6 <timer2_config>:
		if (note_length == 5){
			note_length = 0;
			note_next++;
		}
		if (note_next == 10){
			note_next = 0;
 7c6:	e0 eb       	ldi	r30, 0xB0	; 176
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	80 81       	ld	r24, Z
 7cc:	88 60       	ori	r24, 0x08	; 8
 7ce:	80 83       	st	Z, r24
 7d0:	82 e0       	ldi	r24, 0x02	; 2
 7d2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 7d6:	08 95       	ret

000007d8 <R2D>:
		}
}

void R2D(void)
{
	for (uint16_t i = 0; i <= 0xFFF; i++)
 7d8:	20 e0       	ldi	r18, 0x00	; 0
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	0e c0       	rjmp	.+28     	; 0x7fa <R2D+0x22>
	{
		for (uint16_t j = 0; j <= 0x1AF; j++) {}
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <R2D+0xe>
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	80 3b       	cpi	r24, 0xB0	; 176
 7e8:	41 e0       	ldi	r20, 0x01	; 1
 7ea:	94 07       	cpc	r25, r20
 7ec:	c0 f3       	brcs	.-16     	; 0x7de <R2D+0x6>
		PORTD ^= (1 << PD3);	
 7ee:	9b b1       	in	r25, 0x0b	; 11
 7f0:	88 e0       	ldi	r24, 0x08	; 8
 7f2:	89 27       	eor	r24, r25
 7f4:	8b b9       	out	0x0b, r24	; 11
		}
}

void R2D(void)
{
	for (uint16_t i = 0; i <= 0xFFF; i++)
 7f6:	2f 5f       	subi	r18, 0xFF	; 255
 7f8:	3f 4f       	sbci	r19, 0xFF	; 255
 7fa:	21 15       	cp	r18, r1
 7fc:	80 e1       	ldi	r24, 0x10	; 16
 7fe:	38 07       	cpc	r19, r24
 800:	80 f3       	brcs	.-32     	; 0x7e2 <R2D+0xa>
	{
		for (uint16_t j = 0; j <= 0x1AF; j++) {}
		PORTD ^= (1 << PD3);	
	}
}
 802:	08 95       	ret

00000804 <__vector_9>:

ISR(TIMER2_COMP_vect){ //isr for timer2 
 804:	1f 92       	push	r1
 806:	0f 92       	push	r0
 808:	0f b6       	in	r0, 0x3f	; 63
 80a:	0f 92       	push	r0
 80c:	11 24       	eor	r1, r1
 80e:	0b b6       	in	r0, 0x3b	; 59
 810:	0f 92       	push	r0
 812:	8f 93       	push	r24
 814:	9f 93       	push	r25
 816:	af 93       	push	r26
 818:	bf 93       	push	r27
 81a:	ef 93       	push	r30
 81c:	ff 93       	push	r31
	cli();
 81e:	f8 94       	cli
	PORTD ^= (1<<PD3);
 820:	9b b1       	in	r25, 0x0b	; 11
 822:	88 e0       	ldi	r24, 0x08	; 8
 824:	89 27       	eor	r24, r25
 826:	8b b9       	out	0x0b, r24	; 11
	OCR2A = song[note_next];
 828:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <note_next>
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	ee 5f       	subi	r30, 0xFE	; 254
 830:	fe 4f       	sbci	r31, 0xFE	; 254
 832:	80 81       	ld	r24, Z
 834:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	r2d_length++;
 838:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <r2d_length>
 83c:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <r2d_length+0x1>
 840:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <r2d_length+0x2>
 844:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <r2d_length+0x3>
 848:	01 96       	adiw	r24, 0x01	; 1
 84a:	a1 1d       	adc	r26, r1
 84c:	b1 1d       	adc	r27, r1
 84e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <r2d_length>
 852:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <r2d_length+0x1>
 856:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <r2d_length+0x2>
 85a:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <r2d_length+0x3>
	sei();
 85e:	78 94       	sei
 860:	ff 91       	pop	r31
 862:	ef 91       	pop	r30
 864:	bf 91       	pop	r27
 866:	af 91       	pop	r26
 868:	9f 91       	pop	r25
 86a:	8f 91       	pop	r24
 86c:	0f 90       	pop	r0
 86e:	0b be       	out	0x3b, r0	; 59
 870:	0f 90       	pop	r0
 872:	0f be       	out	0x3f, r0	; 63
 874:	0f 90       	pop	r0
 876:	1f 90       	pop	r1
 878:	18 95       	reti

0000087a <__divsf3>:
 87a:	0c d0       	rcall	.+24     	; 0x894 <__divsf3x>
 87c:	eb c0       	rjmp	.+470    	; 0xa54 <__fp_round>
 87e:	e3 d0       	rcall	.+454    	; 0xa46 <__fp_pscB>
 880:	40 f0       	brcs	.+16     	; 0x892 <__divsf3+0x18>
 882:	da d0       	rcall	.+436    	; 0xa38 <__fp_pscA>
 884:	30 f0       	brcs	.+12     	; 0x892 <__divsf3+0x18>
 886:	21 f4       	brne	.+8      	; 0x890 <__divsf3+0x16>
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	19 f0       	breq	.+6      	; 0x892 <__divsf3+0x18>
 88c:	cc c0       	rjmp	.+408    	; 0xa26 <__fp_inf>
 88e:	51 11       	cpse	r21, r1
 890:	15 c1       	rjmp	.+554    	; 0xabc <__fp_szero>
 892:	cf c0       	rjmp	.+414    	; 0xa32 <__fp_nan>

00000894 <__divsf3x>:
 894:	f0 d0       	rcall	.+480    	; 0xa76 <__fp_split3>
 896:	98 f3       	brcs	.-26     	; 0x87e <__divsf3+0x4>

00000898 <__divsf3_pse>:
 898:	99 23       	and	r25, r25
 89a:	c9 f3       	breq	.-14     	; 0x88e <__divsf3+0x14>
 89c:	55 23       	and	r21, r21
 89e:	b1 f3       	breq	.-20     	; 0x88c <__divsf3+0x12>
 8a0:	95 1b       	sub	r25, r21
 8a2:	55 0b       	sbc	r21, r21
 8a4:	bb 27       	eor	r27, r27
 8a6:	aa 27       	eor	r26, r26
 8a8:	62 17       	cp	r22, r18
 8aa:	73 07       	cpc	r23, r19
 8ac:	84 07       	cpc	r24, r20
 8ae:	38 f0       	brcs	.+14     	; 0x8be <__divsf3_pse+0x26>
 8b0:	9f 5f       	subi	r25, 0xFF	; 255
 8b2:	5f 4f       	sbci	r21, 0xFF	; 255
 8b4:	22 0f       	add	r18, r18
 8b6:	33 1f       	adc	r19, r19
 8b8:	44 1f       	adc	r20, r20
 8ba:	aa 1f       	adc	r26, r26
 8bc:	a9 f3       	breq	.-22     	; 0x8a8 <__divsf3_pse+0x10>
 8be:	33 d0       	rcall	.+102    	; 0x926 <__divsf3_pse+0x8e>
 8c0:	0e 2e       	mov	r0, r30
 8c2:	3a f0       	brmi	.+14     	; 0x8d2 <__divsf3_pse+0x3a>
 8c4:	e0 e8       	ldi	r30, 0x80	; 128
 8c6:	30 d0       	rcall	.+96     	; 0x928 <__divsf3_pse+0x90>
 8c8:	91 50       	subi	r25, 0x01	; 1
 8ca:	50 40       	sbci	r21, 0x00	; 0
 8cc:	e6 95       	lsr	r30
 8ce:	00 1c       	adc	r0, r0
 8d0:	ca f7       	brpl	.-14     	; 0x8c4 <__divsf3_pse+0x2c>
 8d2:	29 d0       	rcall	.+82     	; 0x926 <__divsf3_pse+0x8e>
 8d4:	fe 2f       	mov	r31, r30
 8d6:	27 d0       	rcall	.+78     	; 0x926 <__divsf3_pse+0x8e>
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	bb 1f       	adc	r27, r27
 8e0:	26 17       	cp	r18, r22
 8e2:	37 07       	cpc	r19, r23
 8e4:	48 07       	cpc	r20, r24
 8e6:	ab 07       	cpc	r26, r27
 8e8:	b0 e8       	ldi	r27, 0x80	; 128
 8ea:	09 f0       	breq	.+2      	; 0x8ee <__divsf3_pse+0x56>
 8ec:	bb 0b       	sbc	r27, r27
 8ee:	80 2d       	mov	r24, r0
 8f0:	bf 01       	movw	r22, r30
 8f2:	ff 27       	eor	r31, r31
 8f4:	93 58       	subi	r25, 0x83	; 131
 8f6:	5f 4f       	sbci	r21, 0xFF	; 255
 8f8:	2a f0       	brmi	.+10     	; 0x904 <__divsf3_pse+0x6c>
 8fa:	9e 3f       	cpi	r25, 0xFE	; 254
 8fc:	51 05       	cpc	r21, r1
 8fe:	68 f0       	brcs	.+26     	; 0x91a <__divsf3_pse+0x82>
 900:	92 c0       	rjmp	.+292    	; 0xa26 <__fp_inf>
 902:	dc c0       	rjmp	.+440    	; 0xabc <__fp_szero>
 904:	5f 3f       	cpi	r21, 0xFF	; 255
 906:	ec f3       	brlt	.-6      	; 0x902 <__divsf3_pse+0x6a>
 908:	98 3e       	cpi	r25, 0xE8	; 232
 90a:	dc f3       	brlt	.-10     	; 0x902 <__divsf3_pse+0x6a>
 90c:	86 95       	lsr	r24
 90e:	77 95       	ror	r23
 910:	67 95       	ror	r22
 912:	b7 95       	ror	r27
 914:	f7 95       	ror	r31
 916:	9f 5f       	subi	r25, 0xFF	; 255
 918:	c9 f7       	brne	.-14     	; 0x90c <__divsf3_pse+0x74>
 91a:	88 0f       	add	r24, r24
 91c:	91 1d       	adc	r25, r1
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	97 f9       	bld	r25, 7
 924:	08 95       	ret
 926:	e1 e0       	ldi	r30, 0x01	; 1
 928:	66 0f       	add	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	bb 1f       	adc	r27, r27
 930:	62 17       	cp	r22, r18
 932:	73 07       	cpc	r23, r19
 934:	84 07       	cpc	r24, r20
 936:	ba 07       	cpc	r27, r26
 938:	20 f0       	brcs	.+8      	; 0x942 <__divsf3_pse+0xaa>
 93a:	62 1b       	sub	r22, r18
 93c:	73 0b       	sbc	r23, r19
 93e:	84 0b       	sbc	r24, r20
 940:	ba 0b       	sbc	r27, r26
 942:	ee 1f       	adc	r30, r30
 944:	88 f7       	brcc	.-30     	; 0x928 <__divsf3_pse+0x90>
 946:	e0 95       	com	r30
 948:	08 95       	ret

0000094a <__fixsfsi>:
 94a:	04 d0       	rcall	.+8      	; 0x954 <__fixunssfsi>
 94c:	68 94       	set
 94e:	b1 11       	cpse	r27, r1
 950:	b5 c0       	rjmp	.+362    	; 0xabc <__fp_szero>
 952:	08 95       	ret

00000954 <__fixunssfsi>:
 954:	98 d0       	rcall	.+304    	; 0xa86 <__fp_splitA>
 956:	88 f0       	brcs	.+34     	; 0x97a <__fixunssfsi+0x26>
 958:	9f 57       	subi	r25, 0x7F	; 127
 95a:	90 f0       	brcs	.+36     	; 0x980 <__fixunssfsi+0x2c>
 95c:	b9 2f       	mov	r27, r25
 95e:	99 27       	eor	r25, r25
 960:	b7 51       	subi	r27, 0x17	; 23
 962:	a0 f0       	brcs	.+40     	; 0x98c <__fixunssfsi+0x38>
 964:	d1 f0       	breq	.+52     	; 0x99a <__fixunssfsi+0x46>
 966:	66 0f       	add	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	1a f0       	brmi	.+6      	; 0x976 <__fixunssfsi+0x22>
 970:	ba 95       	dec	r27
 972:	c9 f7       	brne	.-14     	; 0x966 <__fixunssfsi+0x12>
 974:	12 c0       	rjmp	.+36     	; 0x99a <__fixunssfsi+0x46>
 976:	b1 30       	cpi	r27, 0x01	; 1
 978:	81 f0       	breq	.+32     	; 0x99a <__fixunssfsi+0x46>
 97a:	9f d0       	rcall	.+318    	; 0xaba <__fp_zero>
 97c:	b1 e0       	ldi	r27, 0x01	; 1
 97e:	08 95       	ret
 980:	9c c0       	rjmp	.+312    	; 0xaba <__fp_zero>
 982:	67 2f       	mov	r22, r23
 984:	78 2f       	mov	r23, r24
 986:	88 27       	eor	r24, r24
 988:	b8 5f       	subi	r27, 0xF8	; 248
 98a:	39 f0       	breq	.+14     	; 0x99a <__fixunssfsi+0x46>
 98c:	b9 3f       	cpi	r27, 0xF9	; 249
 98e:	cc f3       	brlt	.-14     	; 0x982 <__fixunssfsi+0x2e>
 990:	86 95       	lsr	r24
 992:	77 95       	ror	r23
 994:	67 95       	ror	r22
 996:	b3 95       	inc	r27
 998:	d9 f7       	brne	.-10     	; 0x990 <__fixunssfsi+0x3c>
 99a:	3e f4       	brtc	.+14     	; 0x9aa <__fixunssfsi+0x56>
 99c:	90 95       	com	r25
 99e:	80 95       	com	r24
 9a0:	70 95       	com	r23
 9a2:	61 95       	neg	r22
 9a4:	7f 4f       	sbci	r23, 0xFF	; 255
 9a6:	8f 4f       	sbci	r24, 0xFF	; 255
 9a8:	9f 4f       	sbci	r25, 0xFF	; 255
 9aa:	08 95       	ret

000009ac <__floatunsisf>:
 9ac:	e8 94       	clt
 9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <__floatsisf+0x12>

000009b0 <__floatsisf>:
 9b0:	97 fb       	bst	r25, 7
 9b2:	3e f4       	brtc	.+14     	; 0x9c2 <__floatsisf+0x12>
 9b4:	90 95       	com	r25
 9b6:	80 95       	com	r24
 9b8:	70 95       	com	r23
 9ba:	61 95       	neg	r22
 9bc:	7f 4f       	sbci	r23, 0xFF	; 255
 9be:	8f 4f       	sbci	r24, 0xFF	; 255
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	99 23       	and	r25, r25
 9c4:	a9 f0       	breq	.+42     	; 0x9f0 <__floatsisf+0x40>
 9c6:	f9 2f       	mov	r31, r25
 9c8:	96 e9       	ldi	r25, 0x96	; 150
 9ca:	bb 27       	eor	r27, r27
 9cc:	93 95       	inc	r25
 9ce:	f6 95       	lsr	r31
 9d0:	87 95       	ror	r24
 9d2:	77 95       	ror	r23
 9d4:	67 95       	ror	r22
 9d6:	b7 95       	ror	r27
 9d8:	f1 11       	cpse	r31, r1
 9da:	f8 cf       	rjmp	.-16     	; 0x9cc <__floatsisf+0x1c>
 9dc:	fa f4       	brpl	.+62     	; 0xa1c <__floatsisf+0x6c>
 9de:	bb 0f       	add	r27, r27
 9e0:	11 f4       	brne	.+4      	; 0x9e6 <__floatsisf+0x36>
 9e2:	60 ff       	sbrs	r22, 0
 9e4:	1b c0       	rjmp	.+54     	; 0xa1c <__floatsisf+0x6c>
 9e6:	6f 5f       	subi	r22, 0xFF	; 255
 9e8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ea:	8f 4f       	sbci	r24, 0xFF	; 255
 9ec:	9f 4f       	sbci	r25, 0xFF	; 255
 9ee:	16 c0       	rjmp	.+44     	; 0xa1c <__floatsisf+0x6c>
 9f0:	88 23       	and	r24, r24
 9f2:	11 f0       	breq	.+4      	; 0x9f8 <__floatsisf+0x48>
 9f4:	96 e9       	ldi	r25, 0x96	; 150
 9f6:	11 c0       	rjmp	.+34     	; 0xa1a <__floatsisf+0x6a>
 9f8:	77 23       	and	r23, r23
 9fa:	21 f0       	breq	.+8      	; 0xa04 <__floatsisf+0x54>
 9fc:	9e e8       	ldi	r25, 0x8E	; 142
 9fe:	87 2f       	mov	r24, r23
 a00:	76 2f       	mov	r23, r22
 a02:	05 c0       	rjmp	.+10     	; 0xa0e <__floatsisf+0x5e>
 a04:	66 23       	and	r22, r22
 a06:	71 f0       	breq	.+28     	; 0xa24 <__floatsisf+0x74>
 a08:	96 e8       	ldi	r25, 0x86	; 134
 a0a:	86 2f       	mov	r24, r22
 a0c:	70 e0       	ldi	r23, 0x00	; 0
 a0e:	60 e0       	ldi	r22, 0x00	; 0
 a10:	2a f0       	brmi	.+10     	; 0xa1c <__floatsisf+0x6c>
 a12:	9a 95       	dec	r25
 a14:	66 0f       	add	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	88 1f       	adc	r24, r24
 a1a:	da f7       	brpl	.-10     	; 0xa12 <__floatsisf+0x62>
 a1c:	88 0f       	add	r24, r24
 a1e:	96 95       	lsr	r25
 a20:	87 95       	ror	r24
 a22:	97 f9       	bld	r25, 7
 a24:	08 95       	ret

00000a26 <__fp_inf>:
 a26:	97 f9       	bld	r25, 7
 a28:	9f 67       	ori	r25, 0x7F	; 127
 a2a:	80 e8       	ldi	r24, 0x80	; 128
 a2c:	70 e0       	ldi	r23, 0x00	; 0
 a2e:	60 e0       	ldi	r22, 0x00	; 0
 a30:	08 95       	ret

00000a32 <__fp_nan>:
 a32:	9f ef       	ldi	r25, 0xFF	; 255
 a34:	80 ec       	ldi	r24, 0xC0	; 192
 a36:	08 95       	ret

00000a38 <__fp_pscA>:
 a38:	00 24       	eor	r0, r0
 a3a:	0a 94       	dec	r0
 a3c:	16 16       	cp	r1, r22
 a3e:	17 06       	cpc	r1, r23
 a40:	18 06       	cpc	r1, r24
 a42:	09 06       	cpc	r0, r25
 a44:	08 95       	ret

00000a46 <__fp_pscB>:
 a46:	00 24       	eor	r0, r0
 a48:	0a 94       	dec	r0
 a4a:	12 16       	cp	r1, r18
 a4c:	13 06       	cpc	r1, r19
 a4e:	14 06       	cpc	r1, r20
 a50:	05 06       	cpc	r0, r21
 a52:	08 95       	ret

00000a54 <__fp_round>:
 a54:	09 2e       	mov	r0, r25
 a56:	03 94       	inc	r0
 a58:	00 0c       	add	r0, r0
 a5a:	11 f4       	brne	.+4      	; 0xa60 <__fp_round+0xc>
 a5c:	88 23       	and	r24, r24
 a5e:	52 f0       	brmi	.+20     	; 0xa74 <__fp_round+0x20>
 a60:	bb 0f       	add	r27, r27
 a62:	40 f4       	brcc	.+16     	; 0xa74 <__fp_round+0x20>
 a64:	bf 2b       	or	r27, r31
 a66:	11 f4       	brne	.+4      	; 0xa6c <__fp_round+0x18>
 a68:	60 ff       	sbrs	r22, 0
 a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__fp_round+0x20>
 a6c:	6f 5f       	subi	r22, 0xFF	; 255
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	08 95       	ret

00000a76 <__fp_split3>:
 a76:	57 fd       	sbrc	r21, 7
 a78:	90 58       	subi	r25, 0x80	; 128
 a7a:	44 0f       	add	r20, r20
 a7c:	55 1f       	adc	r21, r21
 a7e:	59 f0       	breq	.+22     	; 0xa96 <__fp_splitA+0x10>
 a80:	5f 3f       	cpi	r21, 0xFF	; 255
 a82:	71 f0       	breq	.+28     	; 0xaa0 <__fp_splitA+0x1a>
 a84:	47 95       	ror	r20

00000a86 <__fp_splitA>:
 a86:	88 0f       	add	r24, r24
 a88:	97 fb       	bst	r25, 7
 a8a:	99 1f       	adc	r25, r25
 a8c:	61 f0       	breq	.+24     	; 0xaa6 <__fp_splitA+0x20>
 a8e:	9f 3f       	cpi	r25, 0xFF	; 255
 a90:	79 f0       	breq	.+30     	; 0xab0 <__fp_splitA+0x2a>
 a92:	87 95       	ror	r24
 a94:	08 95       	ret
 a96:	12 16       	cp	r1, r18
 a98:	13 06       	cpc	r1, r19
 a9a:	14 06       	cpc	r1, r20
 a9c:	55 1f       	adc	r21, r21
 a9e:	f2 cf       	rjmp	.-28     	; 0xa84 <__fp_split3+0xe>
 aa0:	46 95       	lsr	r20
 aa2:	f1 df       	rcall	.-30     	; 0xa86 <__fp_splitA>
 aa4:	08 c0       	rjmp	.+16     	; 0xab6 <__fp_splitA+0x30>
 aa6:	16 16       	cp	r1, r22
 aa8:	17 06       	cpc	r1, r23
 aaa:	18 06       	cpc	r1, r24
 aac:	99 1f       	adc	r25, r25
 aae:	f1 cf       	rjmp	.-30     	; 0xa92 <__fp_splitA+0xc>
 ab0:	86 95       	lsr	r24
 ab2:	71 05       	cpc	r23, r1
 ab4:	61 05       	cpc	r22, r1
 ab6:	08 94       	sec
 ab8:	08 95       	ret

00000aba <__fp_zero>:
 aba:	e8 94       	clt

00000abc <__fp_szero>:
 abc:	bb 27       	eor	r27, r27
 abe:	66 27       	eor	r22, r22
 ac0:	77 27       	eor	r23, r23
 ac2:	cb 01       	movw	r24, r22
 ac4:	97 f9       	bld	r25, 7
 ac6:	08 95       	ret

00000ac8 <__mulsf3>:
 ac8:	0b d0       	rcall	.+22     	; 0xae0 <__mulsf3x>
 aca:	c4 cf       	rjmp	.-120    	; 0xa54 <__fp_round>
 acc:	b5 df       	rcall	.-150    	; 0xa38 <__fp_pscA>
 ace:	28 f0       	brcs	.+10     	; 0xada <__mulsf3+0x12>
 ad0:	ba df       	rcall	.-140    	; 0xa46 <__fp_pscB>
 ad2:	18 f0       	brcs	.+6      	; 0xada <__mulsf3+0x12>
 ad4:	95 23       	and	r25, r21
 ad6:	09 f0       	breq	.+2      	; 0xada <__mulsf3+0x12>
 ad8:	a6 cf       	rjmp	.-180    	; 0xa26 <__fp_inf>
 ada:	ab cf       	rjmp	.-170    	; 0xa32 <__fp_nan>
 adc:	11 24       	eor	r1, r1
 ade:	ee cf       	rjmp	.-36     	; 0xabc <__fp_szero>

00000ae0 <__mulsf3x>:
 ae0:	ca df       	rcall	.-108    	; 0xa76 <__fp_split3>
 ae2:	a0 f3       	brcs	.-24     	; 0xacc <__mulsf3+0x4>

00000ae4 <__mulsf3_pse>:
 ae4:	95 9f       	mul	r25, r21
 ae6:	d1 f3       	breq	.-12     	; 0xadc <__mulsf3+0x14>
 ae8:	95 0f       	add	r25, r21
 aea:	50 e0       	ldi	r21, 0x00	; 0
 aec:	55 1f       	adc	r21, r21
 aee:	62 9f       	mul	r22, r18
 af0:	f0 01       	movw	r30, r0
 af2:	72 9f       	mul	r23, r18
 af4:	bb 27       	eor	r27, r27
 af6:	f0 0d       	add	r31, r0
 af8:	b1 1d       	adc	r27, r1
 afa:	63 9f       	mul	r22, r19
 afc:	aa 27       	eor	r26, r26
 afe:	f0 0d       	add	r31, r0
 b00:	b1 1d       	adc	r27, r1
 b02:	aa 1f       	adc	r26, r26
 b04:	64 9f       	mul	r22, r20
 b06:	66 27       	eor	r22, r22
 b08:	b0 0d       	add	r27, r0
 b0a:	a1 1d       	adc	r26, r1
 b0c:	66 1f       	adc	r22, r22
 b0e:	82 9f       	mul	r24, r18
 b10:	22 27       	eor	r18, r18
 b12:	b0 0d       	add	r27, r0
 b14:	a1 1d       	adc	r26, r1
 b16:	62 1f       	adc	r22, r18
 b18:	73 9f       	mul	r23, r19
 b1a:	b0 0d       	add	r27, r0
 b1c:	a1 1d       	adc	r26, r1
 b1e:	62 1f       	adc	r22, r18
 b20:	83 9f       	mul	r24, r19
 b22:	a0 0d       	add	r26, r0
 b24:	61 1d       	adc	r22, r1
 b26:	22 1f       	adc	r18, r18
 b28:	74 9f       	mul	r23, r20
 b2a:	33 27       	eor	r19, r19
 b2c:	a0 0d       	add	r26, r0
 b2e:	61 1d       	adc	r22, r1
 b30:	23 1f       	adc	r18, r19
 b32:	84 9f       	mul	r24, r20
 b34:	60 0d       	add	r22, r0
 b36:	21 1d       	adc	r18, r1
 b38:	82 2f       	mov	r24, r18
 b3a:	76 2f       	mov	r23, r22
 b3c:	6a 2f       	mov	r22, r26
 b3e:	11 24       	eor	r1, r1
 b40:	9f 57       	subi	r25, 0x7F	; 127
 b42:	50 40       	sbci	r21, 0x00	; 0
 b44:	8a f0       	brmi	.+34     	; 0xb68 <__mulsf3_pse+0x84>
 b46:	e1 f0       	breq	.+56     	; 0xb80 <__mulsf3_pse+0x9c>
 b48:	88 23       	and	r24, r24
 b4a:	4a f0       	brmi	.+18     	; 0xb5e <__mulsf3_pse+0x7a>
 b4c:	ee 0f       	add	r30, r30
 b4e:	ff 1f       	adc	r31, r31
 b50:	bb 1f       	adc	r27, r27
 b52:	66 1f       	adc	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	91 50       	subi	r25, 0x01	; 1
 b5a:	50 40       	sbci	r21, 0x00	; 0
 b5c:	a9 f7       	brne	.-22     	; 0xb48 <__mulsf3_pse+0x64>
 b5e:	9e 3f       	cpi	r25, 0xFE	; 254
 b60:	51 05       	cpc	r21, r1
 b62:	70 f0       	brcs	.+28     	; 0xb80 <__mulsf3_pse+0x9c>
 b64:	60 cf       	rjmp	.-320    	; 0xa26 <__fp_inf>
 b66:	aa cf       	rjmp	.-172    	; 0xabc <__fp_szero>
 b68:	5f 3f       	cpi	r21, 0xFF	; 255
 b6a:	ec f3       	brlt	.-6      	; 0xb66 <__mulsf3_pse+0x82>
 b6c:	98 3e       	cpi	r25, 0xE8	; 232
 b6e:	dc f3       	brlt	.-10     	; 0xb66 <__mulsf3_pse+0x82>
 b70:	86 95       	lsr	r24
 b72:	77 95       	ror	r23
 b74:	67 95       	ror	r22
 b76:	b7 95       	ror	r27
 b78:	f7 95       	ror	r31
 b7a:	e7 95       	ror	r30
 b7c:	9f 5f       	subi	r25, 0xFF	; 255
 b7e:	c1 f7       	brne	.-16     	; 0xb70 <__mulsf3_pse+0x8c>
 b80:	fe 2b       	or	r31, r30
 b82:	88 0f       	add	r24, r24
 b84:	91 1d       	adc	r25, r1
 b86:	96 95       	lsr	r25
 b88:	87 95       	ror	r24
 b8a:	97 f9       	bld	r25, 7
 b8c:	08 95       	ret

00000b8e <__divmodhi4>:
 b8e:	97 fb       	bst	r25, 7
 b90:	07 2e       	mov	r0, r23
 b92:	16 f4       	brtc	.+4      	; 0xb98 <__divmodhi4+0xa>
 b94:	00 94       	com	r0
 b96:	06 d0       	rcall	.+12     	; 0xba4 <__divmodhi4_neg1>
 b98:	77 fd       	sbrc	r23, 7
 b9a:	08 d0       	rcall	.+16     	; 0xbac <__divmodhi4_neg2>
 b9c:	0b d0       	rcall	.+22     	; 0xbb4 <__udivmodhi4>
 b9e:	07 fc       	sbrc	r0, 7
 ba0:	05 d0       	rcall	.+10     	; 0xbac <__divmodhi4_neg2>
 ba2:	3e f4       	brtc	.+14     	; 0xbb2 <__divmodhi4_exit>

00000ba4 <__divmodhi4_neg1>:
 ba4:	90 95       	com	r25
 ba6:	81 95       	neg	r24
 ba8:	9f 4f       	sbci	r25, 0xFF	; 255
 baa:	08 95       	ret

00000bac <__divmodhi4_neg2>:
 bac:	70 95       	com	r23
 bae:	61 95       	neg	r22
 bb0:	7f 4f       	sbci	r23, 0xFF	; 255

00000bb2 <__divmodhi4_exit>:
 bb2:	08 95       	ret

00000bb4 <__udivmodhi4>:
 bb4:	aa 1b       	sub	r26, r26
 bb6:	bb 1b       	sub	r27, r27
 bb8:	51 e1       	ldi	r21, 0x11	; 17
 bba:	07 c0       	rjmp	.+14     	; 0xbca <__udivmodhi4_ep>

00000bbc <__udivmodhi4_loop>:
 bbc:	aa 1f       	adc	r26, r26
 bbe:	bb 1f       	adc	r27, r27
 bc0:	a6 17       	cp	r26, r22
 bc2:	b7 07       	cpc	r27, r23
 bc4:	10 f0       	brcs	.+4      	; 0xbca <__udivmodhi4_ep>
 bc6:	a6 1b       	sub	r26, r22
 bc8:	b7 0b       	sbc	r27, r23

00000bca <__udivmodhi4_ep>:
 bca:	88 1f       	adc	r24, r24
 bcc:	99 1f       	adc	r25, r25
 bce:	5a 95       	dec	r21
 bd0:	a9 f7       	brne	.-22     	; 0xbbc <__udivmodhi4_loop>
 bd2:	80 95       	com	r24
 bd4:	90 95       	com	r25
 bd6:	bc 01       	movw	r22, r24
 bd8:	cd 01       	movw	r24, r26
 bda:	08 95       	ret

00000bdc <_exit>:
 bdc:	f8 94       	cli

00000bde <__stop_program>:
 bde:	ff cf       	rjmp	.-2      	; 0xbde <__stop_program>
